import { createClient } from '@supabase/supabase-js'

const supabaseUrl = import.meta.env.VITE_SUPABASE_URL
const supabaseKey = import.meta.env.VITE_SUPABASE_ANON_KEY

if (!supabaseUrl || !supabaseKey) {
  throw new Error('Supabase credentials missing!')
}

export const supabase = createClient(supabaseUrl, supabaseKey)

// ===== AUTH FUNCTIONS =====

export async function signIn(email, password) {
  console.log('SignIn attempt with:', email)
  const { data, error } = await supabase.auth.signInWithPassword({ email, password })
  console.log('Auth response:', { data, error })
  if (error) throw error
  return data
}

export async function getCurrentUser() {
  console.log('Getting current user...')
  const { data: { user }, error } = await supabase.auth.getUser()
  
  if (error) throw error
  if (!user) return null
  
  return { 
    ...user, 
    profile: { 
      email: user.email, 
      naam: user.email.split('@')[0]
    } 
  }
}

export async function signOut() {
  console.log('Signing out...')
  const { error } = await supabase.auth.signOut()
  if (error) throw error
  return true
}

// ===== CLIENT MANAGEMENT FUNCTIONS =====

export async function createClientAccount(clientData, trainerId) {
  try {
    console.log('üî• Creating client with auth:', clientData)

    // STAP 1: Maak Supabase auth user
    const tempPassword = `Welcome123!`
    const { data: authResponse, error: signUpError } = await supabase.auth.signUp({
      email: clientData.email,
      password: tempPassword
    })

    if (signUpError) {
      console.error('‚ùå Auth creation failed:', signUpError)
      throw signUpError
    }

    console.log('‚úÖ Auth user created')

    // STAP 2: Maak client database record
    const { data: clientRecord, error: clientError } = await supabase
      .from('clients')
      .insert([
        {
          trainer_id: trainerId,
          first_name: clientData.firstName,
          last_name: clientData.lastName,
          email: clientData.email,
          phone: clientData.phone || null,
          goal: clientData.goal,
          experience: clientData.experience,
          status: 'active'
        }
      ])
      .select()

    if (clientError) {
      console.error('‚ùå Client record failed:', clientError)
      throw clientError
    }

    console.log('‚úÖ Client created with login:', clientData.email, 'password:', tempPassword)
    
    return {
      client: clientRecord[0],
      loginCredentials: { email: clientData.email, password: tempPassword }
    }

  } catch (error) {
    console.error('‚ùå Create client error:', error)
    throw error
  }
}

export async function getTrainerClients(trainerId) {
  try {
    const { data: clients, error } = await supabase
      .from('clients')
      .select('*')
      .eq('trainer_id', trainerId)
      .eq('status', 'active')
      .order('created_at', { ascending: false })

    if (error) throw error
    return clients || []
  } catch (error) {
    console.error('‚ùå Get clients error:', error)
    throw error
  }
}

export async function removeClient(clientId) {
  try {
    const { data, error } = await supabase
      .from('clients')
      .update({ status: 'inactive' })
      .eq('id', clientId)
      .select()

    if (error) throw error
    console.log('‚úÖ Client removed:', data)
    return data
  } catch (error) {
    console.error('‚ùå Remove client error:', error)
    throw error
  }
}

// ===== SCHEMA FUNCTIONS =====

export async function getAllSchemas() {
  try {
    const { data: schemas, error } = await supabase
      .from('workout_schemas')
      .select('id, name, description, primary_goal, days_per_week, split_name')
      .order('name')

    if (error) throw error
    console.log('‚úÖ Loaded schemas:', schemas?.length || 0)
    return schemas || []
  } catch (error) {
    console.error('‚ùå Get schemas error:', error)
    throw error
  }
}

export async function assignSchemaToClient(clientId, schemaId) {
  try {
    const { data, error } = await supabase
      .from('clients')
      .update({ 
        assigned_schema_id: schemaId
      })
      .eq('id', clientId)
      .select()
      .single()

    if (error) throw error
    console.log('‚úÖ Schema assigned:', data)
    return data
  } catch (error) {
    console.error('‚ùå Error assigning schema:', error)
    throw error
  }
}

export async function getClientSchema(clientId) {
  try {
    console.log('üìã Getting schema for client:', clientId)
    
    // First get the client to find schema ID
    const { data: client, error: clientError } = await supabase
      .from('clients')
      .select('assigned_schema_id')
      .eq('id', clientId)
      .single()
    
    if (clientError) {
      console.error('‚ùå Error getting client:', clientError)
      return null
    }
    
    if (!client?.assigned_schema_id) {
      console.log('‚ö†Ô∏è Client has no assigned schema')
      return null
    }
    
    console.log('üîç Loading schema with ID:', client.assigned_schema_id)
    
    // Then get the schema separately
    const { data: schema, error: schemaError } = await supabase
      .from('workout_schemas')
      .select('*')
      .eq('id', client.assigned_schema_id)
      .single()
    
    if (schemaError) {
      console.error('‚ùå Error getting schema:', schemaError)
      return null
    }
    
    console.log('‚úÖ Schema loaded:', schema?.name)
    return schema
    
  } catch (error) {
    console.error('‚ùå Unexpected error in getClientSchema:', error)
    return null
  }
}

export async function getClientWithSchema(clientId) {
  try {
    const { data, error } = await supabase
      .from('clients')
      .select(`
        *,
        workout_schemas!assigned_schema_id (*)
      `)
      .eq('id', clientId)
      .single()

    if (error) throw error
    return data
  } catch (error) {
    console.error('‚ùå Error fetching client schema:', error)
    throw error
  }
}

// ===== CLIENT LOGIN FUNCTIONS =====

export async function getClientByEmail(email) {
  try {
    console.log('üîç Searching for client with email:', email)
    
    // Get ALL matching clients first (without .single())
    const { data: clients, error } = await supabase
      .from('clients')
      .select('*')
      .eq('email', email)
    
    console.log('üìä Query result:', { count: clients?.length, clients, error })
    
    if (error) {
      console.error('‚ùå Database error:', error)
      return null
    }
    
    if (!clients || clients.length === 0) {
      console.log('‚ö†Ô∏è No clients found with exact match')
      
      // Try case insensitive
      const { data: clientsInsensitive, error: errorInsensitive } = await supabase
        .from('clients')
        .select('*')
        .ilike('email', `%${email}%`)
      
      console.log('üìä Case insensitive results:', clientsInsensitive)
      
      if (clientsInsensitive && clientsInsensitive.length > 0) {
        console.log('‚úÖ Found client with case-insensitive match')
        return clientsInsensitive[0]
      }
      
      // Last attempt - check all clients
      const { data: allClients } = await supabase
        .from('clients')
        .select('id, email, first_name')
      
      console.log('üîç All clients in database:', allClients)
      console.log('‚ö†Ô∏è No client found for:', email)
      
      return null
    }
    
    console.log(`‚úÖ Found ${clients.length} client(s), returning first`)
    return clients[0]  // Return first match
    
  } catch (error) {
    console.error('üí• Unexpected error:', error)
    return null
  }
}
// Get meal plan templates
export async function getMealPlanTemplates() {
  const { data, error } = await supabase
    .from('meal_plan_templates')
    .select('*')
    .order('created_at', { ascending: false })
  
  if (error) throw error
  return data || []
}

// Save client video URLs
export async function updateClientVideos(clientId, videoUrls) {
  const { data, error } = await supabase
    .from('clients')
    .update({
      video_intro: videoUrls.intro,
      video_workout: videoUrls.workout,
      video_nutrition: videoUrls.nutrition,
      video_technique: videoUrls.technique,
      video_motivation: videoUrls.motivation,
      video_checkin: videoUrls.checkin
    })
    .eq('id', clientId)
  
  if (error) throw error
  return data
}

// Bonus functions
export async function addClientBonus(clientId, bonusData) {
  const { data, error } = await supabase
    .from('client_bonuses')
    .insert({
      client_id: clientId,
      ...bonusData
    })
    .select()
    .single()
  
  if (error) throw error
  return data
}

export async function getClientBonuses(clientId) {
  const { data, error } = await supabase
    .from('client_bonuses')
    .select('*')
    .eq('client_id', clientId)
    .order('assigned_at', { ascending: false })
  
  if (error) throw error
  return data || []
}
export async function getTrainerClients(trainerId) {
  try {
    console.log('üîç Getting clients for trainer:', trainerId)
    const { data: clients, error } = await supabase
      .from('clients')
      .select('*')
      .eq('trainer_id', trainerId)
      .eq('status', 'active')
      .order('created_at', { ascending: false })
    
    if (error) {
      console.error('‚ùå Database error:', error)
      throw error
    }
    
    console.log('‚úÖ Found clients:', clients?.length || 0)
    return clients || []
  } catch (error) {
    console.error('‚ùå Get clients error:', error)
    throw error
  }
}
