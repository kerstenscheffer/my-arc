// src/lib/mealplanDatabase.js
import { supabase } from './supabase'

// ========= Templates =========
export async function saveMealTemplate({ user_id, name, description = '', plan = {}, targets = {} }) {
  const { data, error } = await supabase
    .from('meal_plan_templates')
    .insert([{ user_id, name, description, plan, targets }])
    .select('*')
    .single()
  if (error) throw error
  return data
}

export async function getMealTemplates(user_id) {
  const { data, error } = await supabase
    .from('meal_plan_templates')
    .select('id, name, description, created_at, targets')
    .eq('user_id', user_id)
    .order('created_at', { ascending: false })
  if (error) throw error
  return data || []
}

// ========= Assign to client (the missing export) =========
/**
 * Creates a snapshot of a template for a client.
 * Expects tables:
 *   - meal_plan_templates(id, name, description, plan JSONB, targets JSONB, user_id)
 *   - client_meal_plans(id, client_id, template_id, template_name, snapshot JSONB, targets JSONB, starts_on DATE)
 */
export async function assignTemplateToClient({ template_id, client_id, starts_on }) {
  if (!template_id || !client_id) {
    throw new Error('Missing template_id or client_id')
  }

  // default start date = today (YYYY-MM-DD)
  const startDate =
    starts_on ||
    new Date().toISOString().slice(0, 10)

  // 1) load the template we are assigning
  const { data: tpl, error: tplErr } = await supabase
    .from('meal_plan_templates')
    .select('id, name, description, plan, targets')
    .eq('id', template_id)
    .single()
  if (tplErr) throw tplErr
  if (!tpl) throw new Error('Template not found')

  // 2) create a client snapshot (donâ€™t mutate the original template)
  const payload = {
    client_id,
    template_id: tpl.id,
    template_name: tpl.name,
    snapshot: tpl.plan ?? {},     // rename to your column if different
    targets: tpl.targets ?? {},
    starts_on: startDate,
  }

  const { data, error } = await supabase
    .from('client_meal_plans')
    .insert([payload])
    .select('*')
    .single()
  if (error) throw error
  return data
}

// ========= Client reads =========
export async function getClientMealPlan(client_id) {
  const { data, error } = await supabase
    .from('client_meal_plans')
    .select('id, template_id, template_name, snapshot, targets, starts_on, created_at')
    .eq('client_id', client_id)
    .order('created_at', { ascending: false })
    .limit(1)
    .single()
  if (error) {
    // If no row yet, just return null (better UX for first-time clients)
    if (error.code === 'PGRST116') return null
    throw error
  }
  return data
}

