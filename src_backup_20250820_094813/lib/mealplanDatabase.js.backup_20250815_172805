// src/lib/mealplanDatabase.js â€” clean & deduped (v2)
// Centralized DB helpers for Meal Plan Maker

import { supabase } from './supabase'

/** @typedef {{kcal:number, protein:number, carbs:number, fat:number}} Macro */

// =============================================================================
// MEALS CATALOG
// =============================================================================
export async function getMeals({ q = '', tags = [], limit = 50 } = {}) {
  let query = supabase
    .from('meals')
    .select('*')
    .order('created_at', { ascending: false })
    .limit(limit)

  if (q) query = query.ilike('name', `%${q}%`)
  if (tags?.length) query = query.contains('tags', tags)

  const { data, error } = await query
  if (error) throw error
  return data || []
}

export async function createMeal({ name, default_portion, kcal, protein, carbs, fat, tags = [] }) {
  const { data: { user } } = await supabase.auth.getUser()
  const payload = {
    name,
    default_portion,
    kcal,
    protein,
    carbs,
    fat,
    tags,
    created_by: user?.id || null,
  }
  const { data, error } = await supabase
    .from('meals')
    .insert([payload])
    .select('*')
    .single()
  if (error) throw error
  return data
}

// =============================================================================
// REUSABLE TEMPLATES
// =============================================================================
export async function createMealPlanTemplate({ title, description = '', targets, week_structure /*, video_url, notes, is_public */ }) {
  // Keep payload conservative to avoid SQL errors if optional columns aren't created yet
  const { data: { user } } = await supabase.auth.getUser()
  const payload = {
    title,
    description,
    targets,
    week_structure,
    created_by: user?.id || null,
    // video_url, // enable when column exists
    // notes,
    // is_public,
  }
  const { data, error } = await supabase
    .from('meal_plan_templates')
    .insert([payload])
    .select('*')
    .single()
  if (error) throw error
  return data
}

export async function listMealPlanTemplates() {
  const { data, error } = await supabase
    .from('meal_plan_templates')
    .select('id, title, description, targets, created_at')
    .order('created_at', { ascending: false })
  if (error) throw error
  return data || []
}

export async function getMealPlanTemplate(id) {
  const { data, error } = await supabase
    .from('meal_plan_templates')
    .select('*')
    .eq('id', id)
    .single()
  if (error) throw error
  return data
}

// =============================================================================
// CLIENT SNAPSHOTS (ASSIGNMENTS)
// =============================================================================
export async function assignTemplateToClient({ template_id, client_id, start_date = null }) {
  const tmpl = await getMealPlanTemplate(template_id)
  if (!tmpl) throw new Error('Template not found')

  const payload = {
    client_id,
    template_id,
    title: tmpl.title,
    targets: tmpl.targets,
    week_structure: tmpl.week_structure,
    start_date,
    // video_url: tmpl.video_url,
    // notes: tmpl.notes,
  }
  const { data, error } = await supabase
    .from('client_meal_plans')
    .insert([payload])
    .select('*')
    .single()
  if (error) throw error
  return data
}

export async function getClientMealPlans(client_id) {
  const { data, error } = await supabase
    .from('client_meal_plans')
    .select('id, title, targets, start_date, week_structure, created_at')
    .eq('client_id', client_id)
    .order('created_at', { ascending: false })
  if (error) throw error
  return data || []
}

// =============================================================================
// HELPERS
// =============================================================================
export async function fetchMealsByIds(ids = []) {
  if (!ids?.length) return []
  const { data, error } = await supabase
    .from('meals')
    .select('*')
    .in('id', ids)
  if (error) throw error
  return data || []
}

export async function getClientActiveMealPlan(client_id) {
  const plans = await getClientMealPlans(client_id)
  return plans?.[0] || null
}

