// src/client/pages/ClientProgress.jsx
// MY ARC Client Progress - ULTIMATE COMBINED VERSION 🔥
// Combines: Working Database Functions + Advanced AI Features + Smart Suggestions
import { useState, useEffect } from 'react'
import { useLanguage } from '../../contexts/LanguageContext'
import { supabase, getClientSchema } from '../../lib/supabase'

// ===== DATABASE FUNCTIONS (INLINE - NO EXTERNAL IMPORTS!) =====

const logWorkoutProgress = async ({ clientId, date, exerciseName, sets, notes, coachSuggestion = null }) => {
  try {
    const { data, error } = await supabase.from('workout_progress').insert([{
      client_id: clientId,
      date: date,
      exercise_name: exerciseName,
      sets: sets, // Array of {weight, reps, notes}
      notes: notes,
      coach_suggestion: coachSuggestion,
      created_at: new Date().toISOString()
    }])
    if (error) throw error
    console.log('✅ Workout progress logged:', data)
    return data
  } catch (error) {
    console.error('❌ Log progress error:', error)
    throw error
  }
}

const getClientProgressByDate = async (clientId, date) => {
  try {
    const { data, error } = await supabase
      .from('workout_progress')
      .select('*')
      .eq('client_id', clientId)
      .eq('date', date)
      .order('created_at', { ascending: false })
    if (error) throw error
    return data || []
  } catch (error) {
    console.error('❌ Get progress by date error:', error)
    return []
  }
}

const getExerciseProgress = async (clientId, exerciseName, limit = 20) => {
  try {
    const { data, error } = await supabase
      .from('workout_progress')
      .select('*')
      .eq('client_id', clientId)
      .eq('exercise_name', exerciseName)
      .order('date', { ascending: false })
      .limit(limit)
    if (error) throw error
    return data || []
  } catch (error) {
    console.error('❌ Get exercise progress error:', error)
    return []
  }
}

const getClientExercises = async (clientId) => {
  try {
    const { data, error } = await supabase
      .from('workout_progress')
      .select('exercise_name')
      .eq('client_id', clientId)
    if (error) throw error
    const uniqueExercises = [...new Set((data || []).map(d => d.exercise_name))]
    return uniqueExercises
  } catch (error) {
    console.error('❌ Get exercises error:', error)
    return []
  }
}

// ===== UTILITY FUNCTIONS =====

const getTodayDate = () => {
  return new Date().toISOString().split('T')[0]
}

const getWeekDates = (baseDate = new Date()) => {
  const currentDay = baseDate.getDay()
  const monday = new Date(baseDate)
  monday.setDate(baseDate.getDate() - currentDay + 1)
  
  const weekDates = []
  for (let i = 0; i < 7; i++) {
    const date = new Date(monday)
    date.setDate(monday.getDate() + i)
    weekDates.push(date.toISOString().split('T')[0])
  }
  return weekDates
}

const formatSets = (sets) => {
  if (!sets || sets.length === 0) return ''
  return sets.map(set => `${set.weight}kg × ${set.reps}`).join(', ')
}

const getSuggestionText = (suggestion, language) => {
  const suggestions = {
    nl: {
      increase_weight: 'Verhoog het gewicht voor de volgende workout',
      decrease_weight: 'Verlaag het gewicht en focus op vorm',
      maintain_weight: 'Hou dit gewicht aan en probeer meer reps',
      perfect_range: 'Perfect! Je zit in de ideale rep range'
    },
    en: {
      increase_weight: 'Increase weight for next workout',
      decrease_weight: 'Decrease weight and focus on form', 
      maintain_weight: 'Keep this weight and try more reps',
      perfect_range: 'Perfect! You are in the ideal rep range'
    }
  }
  return suggestions[language]?.[suggestion] || suggestion
}

const calculateMaxWeight = (sets) => {
  if (!sets || sets.length === 0) return 0
  return Math.max(...sets.map(set => set.weight || 0))
}

// Enhanced 1RM calculation for better progress tracking
const calculate1RM = (weight, reps) => {
  if (!weight || !reps || reps <= 0) return 0
  return weight * (1 + (reps / 30)) // Epley formula
}

// ===== COMPREHENSIVE AI EXERCISE DATABASE =====
const AI_EXERCISE_DATABASE = {
  chest: {
    compound: [
      { name: "Machine Chest Press", equipment: "machine", stretch: true, priority: 1, ratings: { strength: 5, hypertrophy: 5, personal: 5 } },
      { name: "Incline Dumbbell Press", equipment: "dumbbells", stretch: true, priority: 2, ratings: { strength: 8, hypertrophy: 8, personal: 8 } },
      { name: "Barbell Bench Press", equipment: "barbell", stretch: false, priority: 3, ratings: { strength: 10, hypertrophy: 8, personal: 10 } },
      { name: "Weighted Dips", equipment: "bodyweight", stretch: true, priority: 4, ratings: { strength: 9, hypertrophy: 9, personal: 7 } },
      { name: "Low-Incline Barbell Bench Press", equipment: "barbell", stretch: true, priority: 2, ratings: { strength: 9, hypertrophy: 9, personal: 9 } },
      { name: "Flat Dumbbell Bench Press", equipment: "dumbbells", stretch: true, priority: 3, ratings: { strength: 8, hypertrophy: 8, personal: 8 } }
    ],
    isolation: [
      { name: "Incline Cable Flies", equipment: "cables", stretch: true, priority: 1, ratings: { strength: 8, hypertrophy: 10, personal: 8 } },
      { name: "Machine Pec Deck", equipment: "machine", stretch: true, priority: 2, ratings: { strength: 8, hypertrophy: 10, personal: 8 } },
      { name: "Seated Cable Fly", equipment: "cables", stretch: true, priority: 2, ratings: { strength: 10, hypertrophy: 10, personal: 10 } },
      { name: "Low-to-High Cable Fly", equipment: "cables", stretch: true, priority: 2, ratings: { strength: 8, hypertrophy: 10, personal: 10 } },
      { name: "Dumbbell Flies", equipment: "dumbbells", stretch: true, priority: 3, ratings: { strength: 5, hypertrophy: 7, personal: 7 } }
    ]
  },
  back: {
    compound: [
      { name: "Lat Pulldown", equipment: "cables", stretch: true, priority: 1, ratings: { strength: 8, hypertrophy: 9, personal: 9 } },
      { name: "Weighted Pull-Ups", equipment: "bodyweight", stretch: true, priority: 1, ratings: { strength: 10, hypertrophy: 10, personal: 10 } },
      { name: "T-Bar Row (Chest-Supported)", equipment: "machine", stretch: true, priority: 2, ratings: { strength: 8, hypertrophy: 10, personal: 9 } },
      { name: "Cable Row", equipment: "cables", stretch: true, priority: 3, ratings: { strength: 7, hypertrophy: 8, personal: 8 } },
      { name: "Barbell Bent-Over Row", equipment: "barbell", stretch: true, priority: 3, ratings: { strength: 9, hypertrophy: 8, personal: 7 } },
      { name: "Single-Arm Dumbbell Row", equipment: "dumbbells", stretch: true, priority: 4, ratings: { strength: 8, hypertrophy: 8, personal: 8 } }
    ],
    isolation: [
      { name: "Cable Pullovers", equipment: "cables", stretch: true, priority: 1, ratings: { strength: 6, hypertrophy: 9, personal: 9 } },
      { name: "Straight-Arm Pulldown (Rope)", equipment: "cables", stretch: true, priority: 1, ratings: { strength: 5, hypertrophy: 8, personal: 8 } },
      { name: "Face Pulls", equipment: "cables", stretch: false, priority: 3, ratings: { strength: 5, hypertrophy: 7, personal: 7 } },
      { name: "Single-Arm Lat Pulldown", equipment: "cables", stretch: true, priority: 2, ratings: { strength: 7, hypertrophy: 8, personal: 8 } }
    ]
  },
  shoulders: {
    compound: [
      { name: "Machine Shoulder Press", equipment: "machine", stretch: false, priority: 1, ratings: { strength: 8, hypertrophy: 8, personal: 8 } },
      { name: "Dumbbell Shoulder Press", equipment: "dumbbells", stretch: false, priority: 2, ratings: { strength: 8, hypertrophy: 8, personal: 8 } },
      { name: "Overhead Press", equipment: "barbell", stretch: false, priority: 3, ratings: { strength: 9, hypertrophy: 7, personal: 7 } },
      { name: "Seated Barbell Overhead Press", equipment: "barbell", stretch: false, priority: 2, ratings: { strength: 9, hypertrophy: 7, personal: 7 } }
    ],
    isolation: [
      { name: "Cable Lateral Raises", equipment: "cables", stretch: true, priority: 1, ratings: { strength: 8, hypertrophy: 10, personal: 10 } },
      { name: "Lean-Away Cable Lateral Raise", equipment: "cables", stretch: true, priority: 1, ratings: { strength: 5, hypertrophy: 10, personal: 10 } },
      { name: "Machine Lateral Raises", equipment: "machine", stretch: true, priority: 2, ratings: { strength: 5, hypertrophy: 9, personal: 9 } },
      { name: "Dumbbell Lateral Raises", equipment: "dumbbells", stretch: false, priority: 3, ratings: { strength: 5, hypertrophy: 7, personal: 7 } },
      { name: "Lying Incline Lateral Raise", equipment: "dumbbells", stretch: true, priority: 2, ratings: { strength: 5, hypertrophy: 9, personal: 9 } }
    ]
  },
  legs: {
    compound: [
      { name: "Leg Press", equipment: "machine", stretch: true, priority: 1, ratings: { strength: 8, hypertrophy: 9, personal: 9 } },
      { name: "Romanian Deadlift", equipment: "barbell", stretch: true, priority: 2, ratings: { strength: 9, hypertrophy: 10, personal: 10 } },
      { name: "Hip Thrust", equipment: "barbell", stretch: true, priority: 3, ratings: { strength: 8, hypertrophy: 9, personal: 9 } },
      { name: "High-Bar Back Squat", equipment: "barbell", stretch: true, priority: 2, ratings: { strength: 9, hypertrophy: 8, personal: 7 } },
      { name: "Bulgarian Split Squat", equipment: "dumbbells", stretch: true, priority: 4, ratings: { strength: 7, hypertrophy: 8, personal: 8 } },
      { name: "Hack Squat", equipment: "machine", stretch: true, priority: 1, ratings: { strength: 8, hypertrophy: 9, personal: 9 } }
    ],
    isolation: [
      { name: "Leg Extension", equipment: "machine", stretch: true, priority: 1, ratings: { strength: 5, hypertrophy: 9, personal: 9 } },
      { name: "Leg Curl", equipment: "machine", stretch: true, priority: 2, ratings: { strength: 5, hypertrophy: 9, personal: 9 } },
      { name: "Calf Raises", equipment: "machine", stretch: true, priority: 3, ratings: { strength: 6, hypertrophy: 7, personal: 7 } },
      { name: "Single-Leg Leg Extension", equipment: "machine", stretch: true, priority: 1, ratings: { strength: 5, hypertrophy: 8, personal: 8 } }
    ]
  },
  biceps: {
    compound: [],
    isolation: [
      { name: "Incline Dumbbell Curl", equipment: "dumbbells", stretch: true, priority: 1, ratings: { strength: 5, hypertrophy: 10, personal: 10 } },
      { name: "Bayesian Cable Curl", equipment: "cables", stretch: true, priority: 1, ratings: { strength: 5, hypertrophy: 10, personal: 10 } },
      { name: "Cable Bicep Curls", equipment: "cables", stretch: true, priority: 1, ratings: { strength: 5, hypertrophy: 9, personal: 9 } },
      { name: "Preacher Curls", equipment: "dumbbells", stretch: true, priority: 2, ratings: { strength: 6, hypertrophy: 9, personal: 9 } },
      { name: "Hammer Curls", equipment: "dumbbells", stretch: false, priority: 3, ratings: { strength: 6, hypertrophy: 8, personal: 8 } },
      { name: "Barbell Curls", equipment: "barbell", stretch: false, priority: 4, ratings: { strength: 7, hypertrophy: 8, personal: 7 } }
    ]
  },
  triceps: {
    compound: [
      { name: "Close-Grip Bench Press", equipment: "barbell", stretch: false, priority: 2, ratings: { strength: 8, hypertrophy: 6, personal: 6 } },
      { name: "Weighted Dips", equipment: "bodyweight", stretch: true, priority: 1, ratings: { strength: 9, hypertrophy: 9, personal: 7 } }
    ],
    isolation: [
      { name: "Cable Overhead Triceps Extension", equipment: "cables", stretch: true, priority: 1, ratings: { strength: 5, hypertrophy: 10, personal: 10 } },
      { name: "Single-Arm Overhead Cable Extension", equipment: "cables", stretch: true, priority: 1, ratings: { strength: 5, hypertrophy: 9, personal: 9 } },
      { name: "Crossbody Cable Extension", equipment: "cables", stretch: true, priority: 1, ratings: { strength: 5, hypertrophy: 9, personal: 9 } },
      { name: "Incline Skull Crushers", equipment: "barbell", stretch: true, priority: 2, ratings: { strength: 6, hypertrophy: 9, personal: 9 } },
      { name: "Triceps Pushdown", equipment: "cables", stretch: false, priority: 2, ratings: { strength: 6, hypertrophy: 8, personal: 8 } },
      { name: "Dumbbell Overhead Extension", equipment: "dumbbells", stretch: true, priority: 3, ratings: { strength: 5, hypertrophy: 9, personal: 9 } }
    ]
  }
}

// ===== SPECIFIC GOALS FOR PRIORITY EXERCISES =====
const SPECIFIC_GOALS = {
  lat_width: {
    name: "Lat Width Development",
    priorityExercises: ["Weighted Pull-Ups", "Lat Pulldown", "Cable Pullovers", "Single-Arm Lat Pulldown"],
  },
  shoulder_width: {
    name: "Shoulder Width (V-Shape)",
    priorityExercises: ["Cable Lateral Raises", "Lean-Away Cable Lateral Raise", "Machine Lateral Raises"],
  },
  tricep_size: {
    name: "Tricep Mass",
    priorityExercises: ["Cable Overhead Triceps Extension", "Single-Arm Overhead Cable Extension", "Incline Skull Crushers"],
  },
  bicep_peaks: {
    name: "Bicep Peaks",
    priorityExercises: ["Incline Dumbbell Curl", "Bayesian Cable Curl", "Preacher Curls"],
  },
  glute_dev: {
    name: "Glute Development", 
    priorityExercises: ["Hip Thrust", "Romanian Deadlift", "Bulgarian Split Squat"],
  },
  chest_thickness: {
    name: "Chest Thickness",
    priorityExercises: ["Incline Dumbbell Press", "Machine Chest Press", "Weighted Dips", "Incline Cable Flies"],
  },
  back_thickness: {
    name: "Back Thickness",
    priorityExercises: ["T-Bar Row (Chest-Supported)", "Barbell Bent-Over Row", "Single-Arm Dumbbell Row", "Cable Row"],
  }
}

// ===== MUSCLE GROUP DETERMINATION (FROM AI GENERATOR) =====
function determineMuscleGroups(dayName, goal = 'hypertrophy') {
  const dayNameLower = dayName.toLowerCase()
  
  if (dayNameLower.includes('push')) {
    return ['chest', 'shoulders', 'triceps']
  } else if (dayNameLower.includes('pull')) {
    return ['back', 'biceps']  
  } else if (dayNameLower.includes('legs') || dayNameLower.includes('lower')) {
    return ['legs']
  } else if (dayNameLower.includes('upper')) {
    return ['chest', 'back', 'shoulders', 'biceps', 'triceps']
  } else if (dayNameLower.includes('chest')) {
    return ['chest']
  } else if (dayNameLower.includes('back')) {
    return ['back']
  } else if (dayNameLower.includes('shoulders')) {
    return ['shoulders'] 
  } else if (dayNameLower.includes('arms')) {
    return ['biceps', 'triceps']
  } else if (dayNameLower.includes('full body')) {
    return ['chest', 'back', 'legs', 'shoulders']
  } else {
    return ['chest', 'back', 'legs', 'shoulders']
  }
}

// ===== GET ALL EXERCISES FROM AI DATABASE =====
function getAllAIExercises() {
  const allExercises = []
  
  Object.keys(AI_EXERCISE_DATABASE).forEach(muscleGroup => {
    // Add compound exercises
    if (AI_EXERCISE_DATABASE[muscleGroup].compound) {
      AI_EXERCISE_DATABASE[muscleGroup].compound.forEach(exercise => {
        allExercises.push({
          ...exercise,
          muscleGroup: muscleGroup,
          type: 'compound',
          primary: muscleGroup
        })
      })
    }
    
    // Add isolation exercises
    if (AI_EXERCISE_DATABASE[muscleGroup].isolation) {
      AI_EXERCISE_DATABASE[muscleGroup].isolation.forEach(exercise => {
        allExercises.push({
          ...exercise,
          muscleGroup: muscleGroup,
          type: 'isolation',
          primary: muscleGroup
        })
      })
    }
  })
  
  console.log('🏋️ Loaded AI exercise database:', allExercises.length, 'exercises')
  return allExercises
}

// ===== ENHANCED PROGRESS CHART WITH 1RM CALCULATION =====
function ProgressChart({ exerciseHistory }) {
  if (!exerciseHistory || exerciseHistory.length < 2) {
    return (
      <div style={{
        textAlign: 'center',
        padding: '2rem',
        color: '#8ea39b',
        fontSize: '0.9rem'
      }}>
        Nog geen grafiek - log eerst 2+ workouts!
      </div>
    )
  }
  
  // Calculate 1RM for each workout using enhanced calculation
  const data = exerciseHistory
    .slice(0, 10)
    .reverse()
    .map(entry => {
      if (!entry.sets || entry.sets.length === 0) return null
      
      // Calculate max 1RM from all sets
      const max1RM = Math.max(...entry.sets.map(set => calculate1RM(set.weight || 0, set.reps || 0)))
      const maxWeight = Math.max(...entry.sets.map(set => set.weight || 0))
      const avgReps = entry.sets.reduce((sum, set) => sum + (set.reps || 0), 0) / entry.sets.length
      
      return {
        date: entry.date,
        oneRM: max1RM,
        weight: maxWeight,
        avgReps: avgReps
      }
    })
    .filter(d => d && d.oneRM > 0)
  
  if (data.length < 2) {
    return (
      <div style={{
        textAlign: 'center', 
        padding: '2rem',
        color: '#8ea39b',
        fontSize: '0.9rem'
      }}>
        Nog geen grafiek - log eerst 2+ workouts!
      </div>
    )
  }
  
  // Calculate scales
  const min1RM = Math.min(...data.map(d => d.oneRM))
  const max1RM = Math.max(...data.map(d => d.oneRM))
  const range = max1RM - min1RM || 1
  
  const points = data.map((point, index) => {
    const x = (index / (data.length - 1)) * 100
    const y = 100 - ((point.oneRM - min1RM) / range) * 80
    return { x, y, ...point }
  })
  
  const pathData = points.map((point, index) => 
    `${index === 0 ? 'M' : 'L'} ${point.x} ${point.y}`
  ).join(' ')
  
  return (
    <div style={{ position: 'relative', width: '100%', height: '100%' }}>
      <svg
        style={{
          position: 'absolute',
          top: 0,
          left: 0,
          width: '100%',
          height: '100%'
        }}
        viewBox="0 0 100 100"
        preserveAspectRatio="none"
      >
        {/* Grid */}
        <defs>
          <pattern id="grid" width="20" height="20" patternUnits="userSpaceOnUse">
            <path d="M 20 0 L 0 0 0 20" fill="none" stroke="rgba(255,255,255,0.1)" strokeWidth="0.5"/>
          </pattern>
        </defs>
        <rect width="100" height="100" fill="url(#grid)" />
        
        {/* Progress line */}
        <path
          d={pathData}
          fill="none"
          stroke="#10b981"
          strokeWidth="2"
          strokeLinecap="round"
          strokeLinejoin="round"
          vectorEffect="non-scaling-stroke"
        />
        
        {/* Data points */}
        {points.map((point, index) => (
          <circle
            key={index}
            cx={point.x}
            cy={point.y}
            r="2"
            fill="#10b981"
            stroke="#fff"
            strokeWidth="1"
            vectorEffect="non-scaling-stroke"
          />
        ))}
      </svg>
      
      {/* Y-axis labels */}
      <div style={{
        position: 'absolute',
        left: '-40px',
        top: '10%',
        fontSize: '0.75rem',
        color: '#10b981',
        fontWeight: '600'
      }}>
        {Math.round(max1RM)}kg
      </div>
      <div style={{
        position: 'absolute',
        left: '-40px',
        bottom: '10%',
        fontSize: '0.75rem',
        color: '#10b981',
        fontWeight: '600'
      }}>
        {Math.round(min1RM)}kg
      </div>
      
      {/* X-axis labels */}
      <div style={{
        position: 'absolute',
        bottom: '-25px',
        left: '0%',
        fontSize: '0.65rem',
        color: 'rgba(255,255,255,0.6)',
        transform: 'translateX(-50%)'
      }}>
        {new Date(points[0]?.date).toLocaleDateString('nl-NL', { month: 'short', day: 'numeric' })}
      </div>
      <div style={{
        position: 'absolute',
        bottom: '-25px',
        right: '0%',
        fontSize: '0.65rem',
        color: 'rgba(255,255,255,0.6)',
        transform: 'translateX(50%)'
      }}>
        {new Date(points[points.length - 1]?.date).toLocaleDateString('nl-NL', { month: 'short', day: 'numeric' })}
      </div>
    </div>
  )
}

// ===== MAIN COMPONENT =====
export default function ClientProgress({ client, schema }) {
  const { t, language } = useLanguage()
  const isMobile = window.innerWidth <= 768
  
  // State management - ALL STATES DECLARED HERE
  const [currentWeek, setCurrentWeek] = useState(0)
  const [selectedDate, setSelectedDate] = useState(null)
  const [weekDates, setWeekDates] = useState([])
  const [weekProgress, setWeekProgress] = useState({})
  const [showWorkoutModal, setShowWorkoutModal] = useState(false)
  const [selectedExercise, setSelectedExercise] = useState('')
  const [exerciseHistory, setExerciseHistory] = useState([])
  const [clientExercises, setClientExercises] = useState([])
  const [exercisesLoading, setExercisesLoading] = useState(true)
  const [loading, setLoading] = useState(true)
  
  // Schema & planned workouts
  const [clientSchema, setClientSchema] = useState(null)
  const [plannedExercises, setPlannedExercises] = useState([])
  
  // Exercise search state
  const [exerciseSearchTerm, setExerciseSearchTerm] = useState('')
  const [showExerciseDropdown, setShowExerciseDropdown] = useState(false)
  const [smartSuggestion, setSmartSuggestion] = useState(null)
  
  // Workout logging state
  const [workoutForm, setWorkoutForm] = useState({
    exerciseName: '',
    sets: [{ reps: '', weight: '' }],
    notes: '',
    coachSuggestion: 'maintain_weight'
  })

  // Initialize week dates
  useEffect(() => {
    const today = new Date()
    today.setDate(today.getDate() + (currentWeek * 7))
    const dates = getWeekDates(today)
    setWeekDates(dates)
    loadWeekProgress(dates)
  }, [currentWeek, client])

  // Load client exercises + schema
  useEffect(() => {
    if (client?.id) {
      loadClientExercises()
      loadClientSchema()
    }
  }, [client])

  const loadClientExercises = async () => {
    try {
      setExercisesLoading(true)
      
      // Get exercises from database 
      const dbExercises = await getClientExercises(client.id)
      
      // Get exercises from AI database
      const aiExercises = getAllAIExercises()
      
      // Combine: database first (user's history), then AI exercises
      const allExercises = [
        ...dbExercises,
        ...aiExercises
          .filter(ex => !dbExercises.includes(ex.name))
          .map(ex => ex.name)
      ]
      
      setClientExercises(allExercises)
      console.log('✅ Loaded exercises: DB:', dbExercises.length, '+ AI:', aiExercises.length, '= Total:', allExercises.length)
      
    } catch (error) {
      console.error('Error loading exercises:', error)
      // Fallback to AI exercises only
      const aiExercises = getAllAIExercises()
      setClientExercises(aiExercises.map(ex => ex.name))
    } finally {
      setExercisesLoading(false)
    }
  }

  const loadClientSchema = async () => {
    try {
      const schema = await getClientSchema(client.id)
      setClientSchema(schema)
      console.log('✅ Loaded client schema:', schema?.name)
    } catch (error) {
      console.error('Error loading client schema:', error)
    }
  }

  // Get planned exercises for specific date (USING AI GENERATOR LOGIC)
  const getPlannedExercisesForDate = (date) => {
    if (!clientSchema?.week_structure) return []
    
    try {
      const dayOfWeek = new Date(date).getDay() // 0 = Sunday, 1 = Monday, etc
      
      // Find the day in week structure
      const weekStructure = typeof clientSchema.week_structure === 'string' 
        ? JSON.parse(clientSchema.week_structure) 
        : clientSchema.week_structure
      
      // Try different day key formats
      const dayKeys = [
        `dag${dayOfWeek + 1}`, // dag1, dag2, etc
        ['sunday', 'monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday'][dayOfWeek],
        `day${dayOfWeek + 1}`,
        `day_${dayOfWeek + 1}`
      ]
      
      let dayWorkout = null
      for (const key of dayKeys) {
        if (weekStructure[key]) {
          dayWorkout = weekStructure[key]
          break
        }
      }
      
      if (!dayWorkout || !dayWorkout.exercises) {
        // Use AI Generator logic to determine muscle groups for this day
        const dayName = dayWorkout?.name || ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'][dayOfWeek]
        const muscleGroups = determineMuscleGroups(dayName)
        
        // Get top exercises for these muscle groups
        const plannedExercises = []
        muscleGroups.forEach(muscleGroup => {
          const dbGroup = AI_EXERCISE_DATABASE[muscleGroup]
          if (dbGroup) {
            // Add top compound exercise
            if (dbGroup.compound.length > 0) {
              plannedExercises.push(dbGroup.compound[0].name)
            }
            // Add top isolation exercise  
            if (dbGroup.isolation.length > 0) {
              plannedExercises.push(dbGroup.isolation[0].name)
            }
          }
        })
        
        console.log(`🤖 AI Generated planned exercises for ${dayName} (${muscleGroups.join(', ')}):`, plannedExercises)
        return plannedExercises
      }
      
      // Extract exercise names from the day's workout
      const exercises = dayWorkout.exercises.map(ex => ex.name || ex.exercise || ex).filter(Boolean)
      console.log(`📋 Schema planned exercises for day:`, exercises)
      return exercises
      
    } catch (error) {
      console.error('Error getting planned exercises:', error)
      return []
    }
  }

  const loadWeekProgress = async (dates) => {
    try {
      setLoading(true)
      const progressData = {}
      
      for (const date of dates) {
        const dayProgress = await getClientProgressByDate(client.id, date)
        progressData[date] = dayProgress
      }
      
      setWeekProgress(progressData)
    } catch (error) {
      console.error('Error loading week progress:', error)
    } finally {
      setLoading(false)
    }
  }

  const loadExerciseHistory = async (exerciseName) => {
    try {
      const history = await getExerciseProgress(client.id, exerciseName, 10)
      setExerciseHistory(history)
    } catch (error) {
      console.error('Error loading exercise history:', error)
    }
  }

  const openWorkoutModal = async (date) => {
    setSelectedDate(date)
    setShowWorkoutModal(true)
    
    // Load planned exercises for this day using AI logic
    const planned = getPlannedExercisesForDate(date)
    setPlannedExercises(planned)
    
    if (selectedExercise) {
      await loadExerciseHistory(selectedExercise)
    }
  }

  const closeWorkoutModal = () => {
    setShowWorkoutModal(false)
    setSelectedDate(null)
    setWorkoutForm({
      exerciseName: '',
      sets: [{ reps: '', weight: '' }],
      notes: '',
      coachSuggestion: 'maintain_weight'
    })
    setExerciseHistory([])
    setExerciseSearchTerm('')
    setShowExerciseDropdown(false)
    setSmartSuggestion(null)
    setPlannedExercises([])
  }

  const addSet = () => {
    setWorkoutForm(prev => ({
      ...prev,
      sets: [...prev.sets, { reps: '', weight: '' }]
    }))
  }

  const updateSet = (index, field, value) => {
    setWorkoutForm(prev => ({
      ...prev,
      sets: prev.sets.map((set, i) => 
        i === index ? { ...set, [field]: value } : set
      )
    }))
  }

  const removeSet = (index) => {
    if (workoutForm.sets.length > 1) {
      setWorkoutForm(prev => ({
        ...prev,
        sets: prev.sets.filter((_, i) => i !== index)
      }))
    }
  }

  const saveWorkout = async () => {
    try {
      if (!workoutForm.exerciseName || workoutForm.sets.some(set => !set.reps || !set.weight)) {
        alert('Vul alle velden in!')
        return
      }

      await logWorkoutProgress({
        clientId: client.id,
        date: selectedDate,
        exerciseName: workoutForm.exerciseName,
        sets: workoutForm.sets.map(set => ({
          reps: parseInt(set.reps),
          weight: parseFloat(set.weight)
        })),
        notes: workoutForm.notes
      })

      // Refresh week progress
      await loadWeekProgress(weekDates)
      
      // Add to exercises list if new
      if (!clientExercises.includes(workoutForm.exerciseName)) {
        setClientExercises(prev => [...prev, workoutForm.exerciseName].sort())
      }
      
      closeWorkoutModal()
      
    } catch (error) {
      console.error('Error saving workout:', error)
      alert('Fout bij opslaan workout')
    }
  }

  // Enhanced exercise search with AI database integration
  const getFilteredExercises = () => {
    const searchTerm = exerciseSearchTerm.toLowerCase()
    
    // Get all AI exercises with full data
    const allAIExercises = getAllAIExercises()
    
    // Filter based on search term and planned exercises
    const plannedExercisesData = allAIExercises.filter(ex => 
      (plannedExercises || []).includes(ex.name)
    )
    
    const otherExercisesData = allAIExercises.filter(ex => 
      !(plannedExercises || []).includes(ex.name)
    )
    
    if (!searchTerm) {
      return {
        planned: plannedExercisesData.slice(0, 10),
        other: otherExercisesData.slice(0, 15)
      }
    } else {
      const filteredPlanned = plannedExercisesData.filter(ex =>
        ex.name.toLowerCase().includes(searchTerm)
      )
      
      const filteredOther = otherExercisesData.filter(ex =>
        ex.name.toLowerCase().includes(searchTerm)
      ).slice(0, 15)
      
      return {
        planned: filteredPlanned,
        other: filteredOther
      }
    }
  }

  const selectExercise = async (exerciseName) => {
    console.log("🚀 Selecting exercise:", exerciseName)
    setWorkoutForm(prev => ({ ...prev, exerciseName }))
    setSelectedExercise(exerciseName)
    setExerciseSearchTerm(exerciseName)
    setShowExerciseDropdown(false)
    
    // Load history and generate smart suggestion
    if (exerciseName) {
      await loadExerciseHistory(exerciseName)
      await generateSmartSuggestion(exerciseName)
    console.log("📞 generateSmartSuggestion called")
    }
  }

  // Close dropdown when clicking outside
  const handleModalClick = (e) => {
    if (!e.target.closest('.exercise-search-container')) {
      setShowExerciseDropdown(false)
    }
  }

  // Enhanced smart suggestion generator with AI database integration
  const generateSmartSuggestion = async (exerciseName) => {
    console.log("🔍 generateSmartSuggestion called for:", exerciseName)
    try {
      // Get exercise data from AI database
      const allAIExercises = getAllAIExercises()
      const exerciseData = allAIExercises.find(ex => ex.name === exerciseName)
      
      // Get recent history for this exercise
      const history = await getExerciseProgress(client.id, exerciseName, 3)
      
      if (history.length === 0) {
        let message = 'Eerste keer deze oefening! Start met een comfortabel gewicht.'
        
        // Add AI-powered suggestions based on exercise data
        if (exerciseData) {
          if (exerciseData.stretch) {
            message = ' Eerste keer! Deze oefening heeft stretch-tension voordelen. Focus op de stretch positie!'
          }
          if (exerciseData.ratings.hypertrophy >= 9) {
            message += ' Dit is een top hypertrophy oefening!'
          }
        }
        
        setSmartSuggestion({
          type: 'first_time',
          message: message,
          icon: ''
        })
        return
      }

      const lastWorkout = history[0]
      const lastSets = lastWorkout.sets || []
      
      if (lastSets.length === 0) {
        setSmartSuggestion({
          type: 'no_data',
          message: 'Geen data van vorige workout. Begin opnieuw!',
          icon: ''
        })
        return
      }

      // Calculate averages from last workout and 1RM progression
      const avgReps = lastSets.reduce((sum, set) => sum + (set.reps || 0), 0) / lastSets.length
      const maxWeight = Math.max(...lastSets.map(set => set.weight || 0))
      const minReps = Math.min(...lastSets.map(set => set.reps || 0))
      
      // Calculate 1RM progression if we have enough history
      let progression = null
      if (history.length >= 2) {
        const current1RM = Math.max(...lastSets.map(set => calculate1RM(set.weight || 0, set.reps || 0)))
        const previous1RM = Math.max(...history[1].sets.map(set => calculate1RM(set.weight || 0, set.reps || 0)))
        progression = ((current1RM - previous1RM) / previous1RM) * 100
      }

      let suggestion = null

      // Enhanced suggestions using AI exercise data and 1RM progression
      if (avgReps >= 12 && minReps >= 12) {
        let message = ` Geweldig! Je haalde gemiddeld ${Math.round(avgReps)} reps. Tijd voor zwaarder gewicht! Probeer ${maxWeight + 2.5}kg.`
        
        if (progression && progression > 5) {
          message += ` Je 1RM is gestegen met ${progression.toFixed(1)}%! `
        }
        
        if (exerciseData?.stretch) {
          message += ' Focus op de stretch positie voor maximale groei!'
        }
        
        suggestion = {
          type: 'increase_weight',
          message: message,
          icon: '',
          recommendedWeight: maxWeight + 2.5,
          recommendedReps: '8-10',
          progression: progression
        }
      } else if (avgReps < 6) {
        suggestion = {
          type: 'decrease_weight',
          message: ` Je haalde gemiddeld ${Math.round(avgReps)} reps. Probeer lichter gewicht voor betere vorm. Probeer ${Math.max(maxWeight - 2.5, 0)}kg.`,
          icon: '',
          recommendedWeight: Math.max(maxWeight - 2.5, 0),
          recommendedReps: '8-12'
        }
      } else if (avgReps >= 6 && avgReps < 8) {
        suggestion = {
          type: 'more_reps',
          message: `Focus op meer reps! Je zit op ${Math.round(avgReps)} reps. Probeer 8-12 reps te halen met ${maxWeight}kg.`,
          icon: '',
          recommendedWeight: maxWeight,
          recommendedReps: '8-12'
        }
      } else {
        // Sweet spot 8-12 reps
        let message = ` Perfect! Je zit in de ideale range (${Math.round(avgReps)} reps). Hou dit gewicht vast en focus op vorm.`
        
        if (progression && progression > 0) {
          message += ` Je 1RM is verbeterd met ${progression.toFixed(1)}%! `
        }
        
        if (exerciseData?.stretch) {
          message += ' Maximaliseer de stretch positie!'
        }
        
        suggestion = {
          type: 'maintain',
          message: message,
          icon: '',
          recommendedWeight: maxWeight,
          recommendedReps: '8-12',
          progression: progression
        }
      }

      setSmartSuggestion(suggestion)
    console.log("✅ Setting suggestion:", suggestion)
      
    } catch (error) {
      console.error('Error generating smart suggestion:', error)
      setSmartSuggestion({
        type: 'error',
        message: 'Kon geen suggestie genereren. Ga op gevoel!',
        icon: ''
      })
    }
  }

  // Get day name
  const getDayName = (date) => {
    const days = language === 'nl' 
      ? ['Zo', 'Ma', 'Di', 'Wo', 'Do', 'Vr', 'Za']
      : ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
    return days[new Date(date).getDay()]
  }

  // Get day of month
  const getDayNumber = (date) => {
    return new Date(date).getDate()
  }

  // Check if date is today
  const isToday = (date) => {
    return date === getTodayDate()
  }

  // Get progress count for day
  const getDayProgressCount = (date) => {
    return weekProgress[date]?.length || 0
  }

  if (loading) {
    return (
      <div className="myarc-animate-in" style={{ textAlign: 'center', padding: '2rem' }}>
        <div style={{
          width: '40px',
          height: '40px',
          border: '4px solid rgba(16,185,129,0.3)',
          borderTop: '4px solid #10b981',
          borderRadius: '50%',
          animation: 'spin 1s linear infinite',
          margin: '0 auto 1rem'
        }}></div>
        <p style={{ color: '#8ea39b' }}>
        </p>
      </div>
    )
  }

  return (
    <div className="myarc-animate-in">
      <style>
        {`
          @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
          }
        `}
      </style>
      
      {/* Header */}
      <div style={{
        padding: isMobile ? '0.5rem' : '1rem',
        background: 'linear-gradient(135deg, #064e3b 0%, #0a5c42 100%)',
        borderRadius: '8px',
        boxShadow: '0 1px 3px rgba(0,0,0,0.1)',
        marginBottom: '1rem',
        border: '1px solid #10b98133'
      }}>
        <h2 style={{
          color: '#fff',
          fontSize: isMobile ? '1.25rem' : '1.5rem',
          fontWeight: 'bold',
          marginBottom: '0.25rem'
        }}>
          {t('nav.progress')} 
          <span style={{ fontSize: '0.75rem', color: 'rgba(255,255,255,0.7)', marginLeft: '0.5rem' }}>
          </span>
        </h2>
        <p style={{
          color: 'rgba(255,255,255,0.8)',
          fontSize: '0.875rem'
        }}>
          Log je workouts met AI-powered exercise database, 1RM tracking & slimme suggesties
        </p>
      </div>

      {/* Week Navigation */}
      <div style={{
        display: 'flex',
        alignItems: 'center',
        justifyContent: 'space-between',
        marginBottom: '1rem',
        padding: '0 0.5rem'
      }}>
        <button
          onClick={() => setCurrentWeek(prev => prev - 1)}
          style={{
            background: 'transparent',
            border: '1px solid #10b981',
            color: '#10b981',
            padding: '0.5rem',
            borderRadius: '6px',
            fontSize: '1.25rem',
            cursor: 'pointer'
          }}
        >
          ‹
        </button>
        
        <h3 style={{
          color: '#fff',
          fontSize: '1rem',
          fontWeight: '600'
        }}>
          {currentWeek === 0 ? 'Deze Week' : 
           currentWeek > 0 ? `${currentWeek} ${currentWeek === 1 ? 'week' : 'weken'} vooruit` :
           `${Math.abs(currentWeek)} ${Math.abs(currentWeek) === 1 ? 'week' : 'weken'} terug`}
        </h3>
        
        <button
          onClick={() => setCurrentWeek(prev => prev + 1)}
          style={{
            background: 'transparent',
            border: '1px solid #10b981',
            color: '#10b981',
            padding: '0.5rem',
            borderRadius: '6px',
            fontSize: '1.25rem',
            cursor: 'pointer'
          }}
        >
          ›
        </button>
      </div>

      {/* Week Grid */}
      <div style={{
        display: isMobile ? 'flex' : 'grid',
        gridTemplateColumns: isMobile ? 'none' : 'repeat(7, 1fr)',
        gap: isMobile ? '0.3rem' : '0.5rem',
        overflowX: isMobile ? 'auto' : 'visible',
        marginBottom: '1.5rem'
      }}>
        {weekDates.map((date, index) => {
          const progressCount = getDayProgressCount(date)
          const dayIsToday = isToday(date)
          
          return (
            <div
              key={date}
              onClick={() => openWorkoutModal(date)}
              style={{
                minWidth: isMobile ? '120px' : 'auto',
                padding: '1rem',
                background: dayIsToday 
                  ? 'linear-gradient(135deg, #10b981 0%, #059669 100%)'
                  : 'linear-gradient(135deg, #064e3b 0%, #0a5c42 100%)',
                borderRadius: '8px',
                boxShadow: '0 1px 3px rgba(0,0,0,0.1)',
                border: progressCount > 0 ? '2px solid #10b981' : '1px solid #10b98133',
                cursor: 'pointer',
                textAlign: 'center',
                transition: 'all 0.2s ease'
              }}
              onMouseEnter={(e) => {
                e.target.style.transform = 'translateY(-2px)'
                e.target.style.boxShadow = '0 4px 8px rgba(0,0,0,0.15)'
              }}
              onMouseLeave={(e) => {
                e.target.style.transform = 'translateY(0)'
                e.target.style.boxShadow = '0 1px 3px rgba(0,0,0,0.1)'
              }}
            >
              <div style={{
                color: '#fff',
                fontWeight: '600',
                fontSize: '0.75rem',
                marginBottom: '0.25rem'
              }}>
                {getDayName(date)}
              </div>
              <div style={{
                color: '#fff',
                fontSize: '1.5rem',
                fontWeight: 'bold',
                marginBottom: '0.5rem'
              }}>
                {getDayNumber(date)}
              </div>
              {progressCount > 0 && (
                <div style={{
                  background: '#10b981',
                  color: '#000',
                  borderRadius: '12px',
                  padding: '0.25rem 0.5rem',
                  fontSize: '0.75rem',
                  fontWeight: '600'
                }}>
                  {progressCount} workout{progressCount !== 1 ? 's' : ''}
                </div>
              )}
              {progressCount === 0 && (
                <div style={{
                  color: 'rgba(255,255,255,0.6)',
                  fontSize: '0.75rem'
                }}>
                  + Toevoegen
                </div>
              )}
            </div>
          )
        })}
      </div>

      {/* Progress Overview */}
      {Object.values(weekProgress).some(day => day.length > 0) && (
        <div style={{
          padding: '1rem',
          background: 'linear-gradient(135deg, #064e3b 0%, #0a5c42 100%)',
          borderRadius: '8px',
          boxShadow: '0 1px 3px rgba(0,0,0,0.1)',
          border: '1px solid #10b98133',
          marginBottom: '1rem'
        }}>
          <h3 style={{
            color: '#fff',
            fontSize: '1.1rem',
            fontWeight: '600',
            marginBottom: '1rem'
          }}>
            Week Overzicht
          </h3>
          
          {weekDates.map(date => {
            const dayProgress = weekProgress[date] || []
            if (dayProgress.length === 0) return null
            
            return (
              <div key={date} style={{ marginBottom: '0.75rem' }}>
                <div style={{
                  color: '#10b981',
                  fontSize: '0.875rem',
                  fontWeight: '600',
                  marginBottom: '0.25rem'
                }}>
                  {getDayName(date)} {getDayNumber(date)}
                </div>
                {dayProgress.map((workout, idx) => (
                  <div key={idx} style={{
                    background: 'rgba(255,255,255,0.05)',
                    padding: '0.5rem',
                    borderRadius: '6px',
                    marginBottom: '0.25rem',
                    fontSize: '0.875rem'
                  }}>
                    <div style={{ color: '#fff', fontWeight: '600' }}>
                      {workout.exercise_name}
                    </div>
                    <div style={{ color: 'rgba(255,255,255,0.8)' }}>
                      {formatSets(workout.sets)}
                    </div>
                    {workout.notes && (
                      <div style={{ 
                        color: 'rgba(255,255,255,0.6)', 
                        fontSize: '0.75rem',
                        marginTop: '0.25rem'
                      }}>
                        💭 {workout.notes}
                      </div>
                    )}
                  </div>
                ))}
              </div>
            )
          })}
        </div>
      )}

      {/* Workout Logging Modal */}
      {showWorkoutModal && (
        <div 
          style={{
            position: 'fixed',
            top: 0,
            left: 0,
            right: 0,
            bottom: 0,
            background: 'rgba(0,0,0,0.8)',
            zIndex: 1000,
            display: 'flex',
            alignItems: 'center',
            justifyContent: 'center',
            padding: '1rem'
          }}
          onClick={handleModalClick}
        >
          <div style={{
            background: '#010802',
            borderRadius: '12px',
            padding: '1.5rem',
            maxWidth: '500px',
            width: '100%',
            maxHeight: '90vh',
            overflowY: 'auto',
            border: '1px solid #10b98133'
          }}>
            <div style={{
              display: 'flex',
              justifyContent: 'space-between',
              alignItems: 'center',
              marginBottom: '1.5rem'
            }}>
              <h3 style={{
                color: '#fff',
                fontSize: '1.25rem',
                fontWeight: '600'
              }}>
                Workout Loggen
                <span style={{ fontSize: '0.75rem', color: '#10b981', marginLeft: '0.5rem' }}>
                </span>
              </h3>
              <button
                onClick={closeWorkoutModal}
                style={{
                  background: 'transparent',
                  border: 'none',
                  color: '#fff',
                  fontSize: '1.5rem',
                  cursor: 'pointer'
                }}
              >
                ×
              </button>
            </div>

            <div style={{
              color: '#10b981',
              fontSize: '0.875rem',
              marginBottom: '1rem'
            }}>
              {getDayName(selectedDate)} {getDayNumber(selectedDate)} - {new Date(selectedDate).toLocaleDateString('nl-NL')}
            </div>

            {/* Exercise Selection - Zoekbare Lijst met AI Database */}
            <div style={{ marginBottom: '1rem' }}>
              <label style={{
                display: 'block',
                color: '#fff',
                fontSize: '0.875rem',
                fontWeight: '600',
                marginBottom: '0.5rem'
              }}>
                Zoek & Selecteer Oefening * 
                <span style={{ fontSize: '0.75rem', color: '#10b981' }}>
                  (AI Database Enhanced)
                </span>
              </label>
              
              <div className="exercise-search-container" style={{ position: 'relative' }}>
                <input
                  type="text"
                  placeholder="Type om te zoeken naar oefeningen..."
                  value={exerciseSearchTerm}
                  onChange={(e) => setExerciseSearchTerm(e.target.value)}
                  onFocus={() => setShowExerciseDropdown(true)}
                  style={{
                    width: '100%',
                    padding: '0.75rem',
                    background: '#0b1510',
                    border: '1px solid #10b98133',
                    borderRadius: '6px',
                    color: '#fff',
                    fontSize: '0.875rem'
                  }}
                />
                
                {showExerciseDropdown && (
                  <div style={{
                    position: 'absolute',
                    top: '100%',
                    left: 0,
                    right: 0,
                    background: '#0b1510',
                    border: '1px solid #10b98133',
                    borderRadius: '6px',
                    marginTop: '0.25rem',
                    maxHeight: '200px',
                    overflowY: 'auto',
                    zIndex: 1000,
                    boxShadow: '0 4px 12px rgba(0,0,0,0.3)'
                  }}>
                    {exercisesLoading ? (
                      <div style={{
                        padding: '1rem',
                        textAlign: 'center',
                        color: 'rgba(255,255,255,0.6)'
                      }}>
                        <div style={{
                          width: '20px',
                          height: '20px',
                          border: '2px solid rgba(16,185,129,0.3)',
                          borderTop: '2px solid #10b981',
                          borderRadius: '50%',
                          animation: 'spin 1s linear infinite',
                          margin: '0 auto 0.5rem'
                        }}></div>
                        AI Database laden...
                      </div>
                    ) : (
                      <>
                        {(() => {
                          const { planned, other } = getFilteredExercises()
                          
                          return (
                            <>
                              {/* Planned Exercises Section */}
                              {planned.length > 0 && (
                                <>
                                  <div style={{
                                    padding: '0.5rem 0.75rem',
                                    background: 'linear-gradient(135deg, #10b981 0%, #059669 100%)',
                                    color: '#fff',
                                    fontSize: '0.75rem',
                                    fontWeight: '600',
                                    borderBottom: '1px solid rgba(255,255,255,0.1)'
                                  }}>
                                    GEPLANDE WORKOUTS (AI)
                                  </div>
                                  {planned.map(exercise => (
                                    <div
                                      key={`planned-${exercise.name}`}
                                      onClick={() => selectExercise(exercise.name)}
                                      style={{
                                        padding: '0.75rem',
                                        cursor: 'pointer',
                                        borderBottom: '1px solid rgba(255,255,255,0.1)',
                                        color: '#10b981',
                                        fontSize: '0.875rem',
                                        fontWeight: '600',
                                        background: 'rgba(16,185,129,0.05)',
                                        position: 'relative'
                                      }}
                                      onMouseEnter={(e) => e.target.style.background = 'rgba(16,185,129,0.15)'}
                                      onMouseLeave={(e) => e.target.style.background = 'rgba(16,185,129,0.05)'}
                                    >
                                      <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>
                                        <span>
                                          {exercise.name}
                                          {exercise.stretch && <span style={{ marginLeft: '0.25rem' }}>🔥</span>}
                                        </span>
                                        {exercise.ratings && (
                                          <span style={{ fontSize: '0.65rem', color: 'rgba(255,255,255,0.7)' }}>
                                            ⭐{exercise.ratings.personal}/10
                                          </span>
                                        )}
                                      </div>
                                      <div style={{ fontSize: '0.65rem', color: 'rgba(255,255,255,0.6)', marginTop: '0.25rem' }}>
                                        {exercise.type} • {exercise.muscleGroup}
                                      </div>
                                    </div>
                                  ))}
                                </>
                              )}
                              
                              {/* Other Exercises Section */}
                              {other.length > 0 && (
                                <>
                                  {planned.length > 0 && (
                                    <div style={{
                                      padding: '0.5rem 0.75rem',
                                      background: 'rgba(255,255,255,0.05)',
                                      color: 'rgba(255,255,255,0.7)',
                                      fontSize: '0.75rem',
                                      fontWeight: '600',
                                      borderBottom: '1px solid rgba(255,255,255,0.1)'
                                    }}>
                                      🏋️ ANDERE OEFENINGEN (AI DATABASE)
                                    </div>
                                  )}
                                  {other.map(exercise => (
                                    <div
                                      key={`other-${exercise.name}`}
                                      onClick={() => selectExercise(exercise.name)}
                                      style={{
                                        padding: '0.75rem',
                                        cursor: 'pointer',
                                        borderBottom: '1px solid rgba(255,255,255,0.1)',
                                        color: '#fff',
                                        fontSize: '0.875rem'
                                      }}
                                      onMouseEnter={(e) => e.target.style.background = 'rgba(16,185,129,0.1)'}
                                      onMouseLeave={(e) => e.target.style.background = 'transparent'}
                                    >
                                      <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>
                                        <span>
                                          🏋️ {exercise.name}
                                          {exercise.stretch && <span style={{ marginLeft: '0.25rem' }}>🔥</span>}
                                        </span>
                                        {exercise.ratings && (
                                          <span style={{ fontSize: '0.65rem', color: 'rgba(255,255,255,0.7)' }}>
                                            ⭐{exercise.ratings.personal}/10
                                          </span>
                                        )}
                                      </div>
                                      <div style={{ fontSize: '0.65rem', color: 'rgba(255,255,255,0.6)', marginTop: '0.25rem' }}>
                                        {exercise.type} • {exercise.muscleGroup} • {exercise.equipment}
                                      </div>
                                    </div>
                                  ))}
                                </>
                              )}
                              
                              {/* Add custom exercise option */}
                              {exerciseSearchTerm && !clientExercises.includes(exerciseSearchTerm) && (
                                <>
                                  {(planned.length > 0 || other.length > 0) && (
                                    <div style={{
                                      padding: '0.5rem 0.75rem',
                                      background: 'rgba(255,255,255,0.05)',
                                      color: 'rgba(255,255,255,0.7)',
                                      fontSize: '0.75rem',
                                      fontWeight: '600',
                                      borderBottom: '1px solid rgba(255,255,255,0.1)'
                                    }}>
                                      ➕ NIEUWE OEFENING
                                    </div>
                                  )}
                                  <div
                                    onClick={() => selectExercise(exerciseSearchTerm)}
                                    style={{
                                      padding: '0.75rem',
                                      cursor: 'pointer',
                                      borderBottom: '1px solid rgba(255,255,255,0.1)',
                                      color: '#10b981',
                                      fontSize: '0.875rem',
                                      fontWeight: '600'
                                    }}
                                    onMouseEnter={(e) => e.target.style.background = 'rgba(16,185,129,0.1)'}
                                    onMouseLeave={(e) => e.target.style.background = 'transparent'}
                                  >
                                    ➕ Nieuwe oefening toevoegen: "{exerciseSearchTerm}"
                                  </div>
                                </>
                              )}
                              
                              {/* No results */}
                              {planned.length === 0 && other.length === 0 && !exerciseSearchTerm && (
                                <div style={{
                                  padding: '0.75rem',
                                  color: 'rgba(255,255,255,0.6)',
                                  fontSize: '0.875rem',
                                  textAlign: 'center'
                                }}>
                                  Begin met typen om te zoeken...
                                </div>
                              )}
                            </>
                          )
                        })()}
                      </>
                    )}
                  </div>
                )}
              </div>
              
              {/* Selected exercise display */}
              {workoutForm.exerciseName && (
                <div style={{
                  marginTop: '0.5rem',
                  padding: '0.5rem',
                  background: 'rgba(16,185,129,0.1)',
                  borderRadius: '6px',
                  display: 'flex',
                  justifyContent: 'space-between',
                  alignItems: 'center'
                }}>
                  <span style={{ color: '#10b981', fontWeight: '600' }}>
                    ✅ {workoutForm.exerciseName}
                  </span>
                  <button
                    onClick={() => {
                      setWorkoutForm(prev => ({ ...prev, exerciseName: '' }))
                      setExerciseSearchTerm('')
                    }}
                    style={{
                      background: 'transparent',
                      border: 'none',
                      color: '#ef4444',
                      fontSize: '1rem',
                      cursor: 'pointer'
                    }}
                  >
                    ✕
                  </button>
                </div>
              )}
            </div>

            {/* Enhanced Smart Suggestion with 1RM Progression */}
            {workoutForm.exerciseName && smartSuggestion && (
              <div style={{ marginBottom: '1rem' }}>
                <div style={{
                  background: 'linear-gradient(135deg, #6366f1 0%, #8b5cf6 100%)',
                  padding: '1rem',
                  borderRadius: '8px',
                  marginBottom: '0.75rem',
                  border: '1px solid #8b5cf6'
                }}>
                  <div style={{
                    display: 'flex',
                    alignItems: 'center',
                    marginBottom: '0.5rem'
                  }}>
                    <span style={{ fontSize: '1.25rem', marginRight: '0.5rem' }}>
                    </span>
                    <span style={{
                      color: '#fff',
                      fontSize: '0.875rem',
                      fontWeight: '600'
                    }}>
Coach suggesties
                    </span>
                  </div>
                  <div style={{
                    color: '#fff',
                    fontSize: '0.875rem',
                    lineHeight: '1.4',
                    marginBottom: '0.5rem'
                  }}>
                    {smartSuggestion.icon} {smartSuggestion.message}
                  </div>
                  {smartSuggestion.recommendedWeight && (
                    <div style={{
                      display: 'flex',
                      gap: '1rem',
                      fontSize: '0.75rem',
                      color: 'rgba(255,255,255,0.9)',
                      flexWrap: 'wrap'
                    }}>
                      <span>️ Aanbevolen: {smartSuggestion.recommendedWeight}kg</span>
                      <span> Reps: {smartSuggestion.recommendedReps}</span>
                      {smartSuggestion.progression && (
                        <span>1RM: {smartSuggestion.progression > 0 ? '+' : ''}{smartSuggestion.progression.toFixed(1)}%</span>
                      )}
                    </div>
                  )}
                </div>
              </div>
            )}

            {/* Enhanced Progress Graph with 1RM */}
            {exerciseHistory.length > 1 && (
              <div style={{
                background: 'rgba(255,255,255,0.05)',
                padding: '1rem',
                borderRadius: '8px',
                boxShadow: '0 1px 3px rgba(0,0,0,0.1)',
                marginBottom: '1rem'
              }}>
                <h3 style={{
                  color: '#fff',
                  fontSize: '1rem',
                  fontWeight: '600',
                  marginBottom: '1rem',
                  display: 'flex',
                  alignItems: 'center',
                  gap: '0.5rem'
                }}>
                  1RM Progress Grafiek - {workoutForm.exerciseName}
                </h3>
                
                <div style={{
                  position: 'relative',
                  height: '150px',
                  background: '#010802',
                  borderRadius: '6px',
                  padding: '1rem',
                  overflow: 'hidden'
                }}>
                  <ProgressChart exerciseHistory={exerciseHistory} />
                </div>
                
                <div style={{
                  display: 'flex',
                  justifyContent: 'space-between',
                  marginTop: '0.5rem',
                  fontSize: '0.75rem',
                  color: 'rgba(255,255,255,0.6)'
                }}>
                  <span>{exerciseHistory.length} workouts</span>
                  <span>Laatste: {Math.max(...exerciseHistory[0].sets.map(s => s.weight || 0))}kg</span>
                  <span>1RM: {Math.round(Math.max(...exerciseHistory[0].sets.map(s => calculate1RM(s.weight || 0, s.reps || 0))))}kg</span>
                </div>
              </div>
            )}

            {/* Sets Input */}
            <div style={{ marginBottom: '1rem' }}>
              <label style={{
                display: 'block',
                color: '#fff',
                fontSize: '0.875rem',
                fontWeight: '600',
                marginBottom: '0.5rem'
              }}>
                Sets & Gewicht *
              </label>
              
              {workoutForm.sets.map((set, index) => (
                <div key={index} style={{
                  display: 'flex',
                  gap: '0.5rem',
                  marginBottom: '0.5rem',
                  alignItems: 'center'
                }}>
                  <div style={{ 
                    background: '#10b981', 
                    color: '#000', 
                    width: '24px', 
                    height: '24px', 
                    borderRadius: '50%',
                    display: 'flex',
                    alignItems: 'center',
                    justifyContent: 'center',
                    fontSize: '0.8rem',
                    fontWeight: 'bold',
                    flexShrink: 0
                  }}>
                    {index + 1}
                  </div>
                  
                  <div style={{ flex: 1 }}>
                    <input
                      type="number"
                      placeholder="Reps"
                      value={set.reps}
                      onChange={(e) => updateSet(index, 'reps', e.target.value)}
                      style={{
                        width: '100%',
                        padding: '0.5rem',
                        background: '#0b1510',
                        border: '1px solid #10b98133',
                        borderRadius: '6px',
                        color: '#fff',
                        fontSize: '0.875rem'
                      }}
                    />
                  </div>
                  <div style={{ flex: 1 }}>
                    <input
                      type="number"
                      step="0.5"
                      placeholder="Kg"
                      value={set.weight}
                      onChange={(e) => updateSet(index, 'weight', e.target.value)}
                      style={{
                        width: '100%',
                        padding: '0.5rem',
                        background: '#0b1510',
                        border: '1px solid #10b98133',
                        borderRadius: '6px',
                        color: '#fff',
                        fontSize: '0.875rem'
                      }}
                    />
                  </div>
                  {workoutForm.sets.length > 1 && (
                    <button
                      onClick={() => removeSet(index)}
                      style={{
                        background: 'transparent',
                        border: '1px solid #ef4444',
                        color: '#ef4444',
                        padding: '0.5rem',
                        borderRadius: '6px',
                        fontSize: '0.875rem',
                        cursor: 'pointer'
                      }}
                    >
                      −
                    </button>
                  )}
                </div>
              ))}
              
              <button
                onClick={addSet}
                style={{
                  background: 'transparent',
                  border: '1px solid #10b981',
                  color: '#10b981',
                  padding: '0.5rem 1rem',
                  borderRadius: '6px',
                  fontSize: '0.875rem',
                  marginTop: '0.5rem',
                  cursor: 'pointer'
                }}
              >
                + Set Toevoegen
              </button>
            </div>

            {/* Notes */}
            <div style={{ marginBottom: '1.5rem' }}>
              <label style={{
                display: 'block',
                color: '#fff',
                fontSize: '0.875rem',
                fontWeight: '600',
                marginBottom: '0.5rem'
              }}>
                Notitie (optioneel)
              </label>
              <textarea
                placeholder="Hoe voelde de workout? Opmerkingen..."
                value={workoutForm.notes}
                onChange={(e) => setWorkoutForm(prev => ({ 
                  ...prev, 
                  notes: e.target.value 
                }))}
                rows="3"
                style={{
                  width: '100%',
                  padding: '0.75rem',
                  background: '#0b1510',
                  border: '1px solid #10b98133',
                  borderRadius: '6px',
                  color: '#fff',
                  fontSize: '0.875rem',
                  resize: 'vertical'
                }}
              />
            </div>

            {/* Action Buttons */}
            <div style={{
              display: 'flex',
              gap: '0.75rem',
              justifyContent: 'flex-end'
            }}>
              <button
                onClick={closeWorkoutModal}
                style={{
                  padding: '0.75rem 1.5rem',
                  background: 'transparent',
                  border: '1px solid #6b7280',
                  color: '#6b7280',
                  borderRadius: '6px',
                  fontSize: '0.875rem',
                  cursor: 'pointer'
                }}
              >
                Annuleren
              </button>
              <button
                onClick={saveWorkout}
                disabled={!workoutForm.exerciseName || workoutForm.sets.some(set => !set.reps || !set.weight)}
                style={{
                  padding: '0.75rem 1.5rem',
                  background: workoutForm.exerciseName && !workoutForm.sets.some(set => !set.reps || !set.weight)
                    ? 'linear-gradient(135deg, #10b981 0%, #059669 100%)'
                    : '#6b7280',
                  border: 'none',
                  color: '#fff',
                  borderRadius: '6px',
                  fontSize: '0.875rem',
                  fontWeight: '600',
                  cursor: workoutForm.exerciseName && !workoutForm.sets.some(set => !set.reps || !set.weight)
                    ? 'pointer' : 'not-allowed'
                }}
              >
                Opslaan
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  )
}
