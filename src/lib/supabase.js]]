import { createClient } from '@supabase/supabase-js'

const supabaseUrl = import.meta.env.VITE_SUPABASE_URL
const supabaseKey = import.meta.env.VITE_SUPABASE_ANON_KEY

if (!supabaseUrl || !supabaseKey) {
  throw new Error('Supabase credentials missing!')
}

export const supabase = createClient(supabaseUrl, supabaseKey)

// Sign in function
export async function signIn(email, password) {
  console.log('SignIn attempt with:', email)
  const { data, error } = await supabase.auth.signInWithPassword({ email, password })
  console.log('Auth response:', { data, error })
  if (error) throw error
  return data
}

// Get current user with role detection


// Enhanced getCurrentUser - alleen users table voor roles
// Simple getCurrentUser - geen role lookup
export async function getCurrentUser() {
  console.log('Getting current user...')
  const { data: { user }, error } = await supabase.auth.getUser()
  
  if (error) throw error
  if (!user) return null
  
  return { 
    ...user, 
    profile: { 
      email: user.email, 
      naam: user.email.split('@')[0]
    } 
  }
}



// Sign out function
export async function signOut() {
  console.log('Signing out...')
  const { error } = await supabase.auth.signOut()
  if (error) throw error
  return true
}

// Create client with AUTH ACCOUNT + DATABASE RECORD
console.log('✅ Client created with login:', clientData.email, 'password:', tempPassword)
    
    return {
      client: clientRecord[0],
      loginCredentials: { email: clientData.email, password: tempPassword }
    }

  } catch (error) {
    console.error('❌ Create client error:', error)
    throw error
  }
}

// Get all clients for a trainer
export async function getTrainerClients(trainerId) {

// Get all clients for a trainer
export async function getTrainerClients(trainerId) {
  try {
    const { data: clients, error } = await supabase
      .from('clients')
      .select('*')
      .eq('trainer_id', trainerId)
      .eq('status', 'active')
      .order('created_at', { ascending: false })

    if (error) throw error
    return clients || []
  } catch (error) {
    console.error('❌ Get clients error:', error)
    throw error
  }
}
