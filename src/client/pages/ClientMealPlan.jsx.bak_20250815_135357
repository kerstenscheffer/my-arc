// src/client/pages/ClientMealPlan.jsx
import { useEffect, useMemo, useState } from 'react'
import { getClientMealPlans, fetchMealsByIds } from '../../lib/mealplanDatabase'

const SLOT_LABEL = {
  breakfast: 'ü•£ Breakfast',
  lunch: 'ü•ó Lunch',
  dinner: 'üçΩÔ∏è Dinner',
  snack1: 'ü•§ Snack 1',
  snack2: 'üçé Snack 2'
}

function MacroRow({ label, value, target }){
  return (
    <div>
      <div className="myarc-text-muted" style={{fontSize:'var(--text-sm)'}}>{label}</div>
      <div style={{fontSize:'var(--text-lg)', fontWeight:800}}>
        {value} <span className="myarc-text-muted">/ {target ?? '‚Äî'}</span>
      </div>
    </div>
  )
}

export default function ClientMealPlan({ client }){
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState('')
  const [plan, setPlan] = useState(null) // latest snapshot
  const [mealsMap, setMealsMap] = useState({})

  useEffect(()=>{ (async()=>{
    try {
      if(!client?.id) throw new Error('No client id provided')
      // Get latest snapshot (getClientMealPlans already sorted desc)
      const plans = await getClientMealPlans(client.id)
      const latest = plans?.[0] || null
      if(!latest){ setPlan(null); setLoading(false); return }
      setPlan(latest)

      // Resolve all meal_ids used in the week structure
      const ids = Array.from(new Set(
        (latest.week_structure||[]).flatMap(d => (d.meals||[]).map(m => m.meal_id).filter(Boolean))
      ))
      if(ids.length){
        const meals = await fetchMealsByIds(ids)
        const map = Object.fromEntries(meals.map(m => [m.id, m]))
        setMealsMap(map)
      }
    } catch (e) {
      console.error(e)
      setError(e.message)
    } finally {
      setLoading(false)
    }
  })() }, [client?.id])

  const weekTotals = useMemo(()=>{
    if(!plan) return {kcal:0,protein:0,carbs:0,fat:0}
    const totals = {kcal:0,protein:0,carbs:0,fat:0}
    for(const d of (plan.week_structure||[])){
      for(const { meal_id } of (d.meals||[])){
        const mi = meal_id && mealsMap[meal_id]
        if(!mi) continue
        totals.kcal += mi.kcal||0
        totals.protein += mi.protein||0
        totals.carbs += mi.carbs||0
        totals.fat += mi.fat||0
      }
    }
    return totals
  }, [plan, mealsMap])

  if(loading) return <div className="myarc-card myarc-mt-md">Loading meal plan‚Ä¶</div>
  if(error) return <div className="myarc-card myarc-mt-md myarc-text-red">‚ö†Ô∏è {error}</div>
  if(!plan) return <div className="myarc-card myarc-mt-md">Geen meal plan toegewezen.</div>

  const targets = plan.targets || {kcal:0,protein:0,carbs:0,fat:0}

  return (
    <div className="myarc-container myarc-text-white">
      <div className="myarc-flex myarc-justify-between myarc-items-center myarc-mb-md">
        <h1 className="myarc-text-green" style={{fontSize:'var(--text-2xl)', fontWeight:900}}>
          üçΩÔ∏è {plan.title || 'Meal Plan'}
        </h1>
        {plan.start_date && (
          <div className="myarc-text-muted">Start: {new Date(plan.start_date).toLocaleDateString()}</div>
        )}
      </div>

      {/* Week summary */}
      <div className="myarc-card">
        <div className="myarc-flex myarc-gap-xl myarc-flex-wrap">
          <MacroRow label="KCAL" value={weekTotals.kcal} target={targets.kcal} />
          <MacroRow label="PROTEIN" value={weekTotals.protein} target={targets.protein} />
          <MacroRow label="CARBS" value={weekTotals.carbs} target={targets.carbs} />
          <MacroRow label="FAT" value={weekTotals.fat} target={targets.fat} />
        </div>
      </div>

      {/* Days */}
      <div className="myarc-card myarc-mt-md">
        <div className="myarc-grid myarc-grid-cols-1 md:myarc-grid-cols-2 myarc-gap-md">
          {(plan.week_structure||[]).map((day) => {
            const dayTotals = (day.meals||[]).reduce((acc, { meal_id })=>{
              const mi = meal_id && mealsMap[meal_id]
              if(!mi) return acc
              return {
                kcal: acc.kcal + (mi.kcal||0),
                protein: acc.protein + (mi.protein||0),
                carbs: acc.carbs + (mi.carbs||0),
                fat: acc.fat + (mi.fat||0)
              }
            }, {kcal:0,protein:0,carbs:0,fat:0})

            return (
              <div key={day.weekday} className="myarc-card-inner">
                <div className="myarc-flex myarc-justify-between myarc-items-center myarc-mb-sm">
                  <h3 className="myarc-card-title">{String(day.weekday).toUpperCase()}</h3>
                  <div className="myarc-text-muted" style={{fontSize:'var(--text-sm)'}}>
                    {dayTotals.kcal} kcal ‚Ä¢ P{dayTotals.protein} C{dayTotals.carbs} F{dayTotals.fat}
                  </div>
                </div>
                <div className="myarc-flex myarc-flex-col myarc-gap-sm">
                  {(day.meals||[]).map((m, idx) => {
                    const mi = m.meal_id && mealsMap[m.meal_id]
                    return (
                      <div key={idx} className="myarc-row myarc-justify-between myarc-items-center myarc-p-sm myarc-rounded myarc-bg-card">
                        <span className="myarc-text-muted" style={{minWidth:110, textAlign:'left'}}>
                          {SLOT_LABEL[m.slot] || m.slot}
                        </span>
                        {mi ? (
                          <span className="myarc-text-white myarc-truncate" style={{textAlign:'left'}}>
                            {mi.name} ‚Ä¢ {mi.kcal} kcal ‚Ä¢ P{mi.protein} C{mi.carbs} F{mi.fat}
                          </span>
                        ) : (
                          <span className="myarc-text-muted">‚Äî</span>
                        )}
                      </div>
                    )
                  })}
                </div>
              </div>
            )
          })}
        </div>
      </div>
    </div>
  )
}
