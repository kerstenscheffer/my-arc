// src/client/pages/ClientMealPlan.jsx
// MY ARC ‚Äî Meal Planner (Client-facing)
// Clean, mobile-first, green gradients, no black borders.
// Update v2 ‚Äî per Kersten:
// 1) "Templates" tabel staat helemaal onderaan de pagina (info/placeholder)
// 2) Dag-macros: toon totale P/C/F/kcal voor geselecteerde dag in de popup header
// 3) Maaltijd toevoegen: popup met scrollbare lijst + zoekfunctie
// 4) Voor 4 weken x 7 dagen invulbaar (we padden naar 28 dagen en kunnen op elke dag maaltijden toevoegen)

import { useEffect, useMemo, useRef, useState } from 'react'
import { useLanguage } from '../../contexts/LanguageContext'
import {
  getClientPlanWithOverrides,
  fetchMealsByIds,
  saveClientMealSwap,
  listMealsNearCalories,
  getMeals
} from '../../lib/mealplanDatabase'

function formatDate(d) {
  return d.toLocaleDateString(undefined, { weekday: 'short', day: '2-digit', month: '2-digit' })
}
function addDays(date, n) {
  const x = new Date(date)
  x.setDate(x.getDate() + n)
  return x
}
function sumMacros(list) {
  return list.reduce((acc, m) => {
    const kcal = m?.kcal || 0
    const p = m?.protein || 0
    const c = m?.carbs || 0
    const f = m?.fat || 0
    return { kcal: acc.kcal + kcal, protein: acc.protein + p, carbs: acc.carbs + c, fat: acc.fat + f }
  }, { kcal:0, protein:0, carbs:0, fat:0 })
}

export default function ClientMealPlan({ client }) {
  const { t } = useLanguage?.() || { t: (x)=>x }
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState(null)

  const [plan, setPlan] = useState(null)
  const [weekStructure, setWeekStructure] = useState([]) // merged with overrides
  const [mealsMap, setMealsMap] = useState({})

  const [activeWeek, setActiveWeek] = useState(0) // 0..3
  const [showDay, setShowDay] = useState(null) // { index, day }
  const [editMode, setEditMode] = useState(false)
  const [swapSlot, setSwapSlot] = useState(null) // { dayIndex, slot, targetKcal }
  const [swapSuggestions, setSwapSuggestions] = useState([])

  // NEW: Add-meal picker
  const [mealPicker, setMealPicker] = useState(null) // { dayIndex }
  const [search, setSearch] = useState('')
  const [searchResults, setSearchResults] = useState([])
  const searchDebounce = useRef(null)

  // Video + notes
  const videoUrl = plan?.coach_video_url || 'https://cdn.coverr.co/videos/coverr-healthy-fresh-salad-6179/1080p.mp4'
  const notes = plan?.coach_notes || 'Welkom bij jouw voedingsplan! Pas maaltijden aan via ‚ÄúBewerk mijn mealplan‚Äù.'

  // LOAD plan + overrides + meals
  useEffect(() => {
    let mounted = true
    ;(async () => {
      setLoading(true); setError(null)
      try {
        const { plan: p, mergedWeekStructure } = await getClientPlanWithOverrides(client.id)
        if (!mounted) return
        if (!p) {
          setPlan(null)
          setWeekStructure([])
          return
        }
        setPlan(p)
        // 4 weken x 7 dagen afdwingen
        const padded = [...(Array.isArray(mergedWeekStructure)? mergedWeekStructure : [])]
        while (padded.length < 28) padded.push({ day: `Day ${padded.length+1}`, meals: [] })
        setWeekStructure(padded)

        // collect meal_ids
        const ids = padded.flatMap(d => (d?.meals||[]).map(m => m.meal_id).filter(Boolean))
        const unique = [...new Set(ids)]
        if (unique.length) {
          const fetched = await fetchMealsByIds(unique)
          const map = Object.fromEntries(fetched.map(m => [m.id, m]))
          if (!mounted) return
          setMealsMap(map)
        } else {
          setMealsMap({})
        }
      } catch (e) {
        console.error(e)
        setError(e.message || 'Laden mislukt')
      } finally {
        if (mounted) setLoading(false)
      }
    })()
    return () => { mounted = false }
  }, [client.id])

  const startDate = useMemo(() => {
    const s = plan?.start_date ? new Date(plan.start_date) : new Date()
    return new Date(s.getFullYear(), s.getMonth(), s.getDate())
  }, [plan?.start_date])

  const weeks = useMemo(() => {
    // 4 weeks (0..27)
    const arr = Array.isArray(weekStructure) ? weekStructure : []
    const out = []
    for (let w=0; w<4; w++) out.push(arr.slice(w*7, w*7+7))
    return out
  }, [weekStructure])

  function openDay(w, i) {
    const absoluteIndex = w*7 + i
    setShowDay({ index: absoluteIndex, day: weeks[w][i] })
  }
  function closeDay(){ setShowDay(null); setSwapSlot(null); setSwapSuggestions([]) }

  // =============== SWAP ===============
  async function handleSwapPick(meal) {
    if (!swapSlot) return
    try {
      const { dayIndex, slot } = swapSlot
      // Optimistic UI patch
      const updated = [...weekStructure]
      const d = updated[dayIndex]
      if (d) {
        const idx = (d.meals||[]).findIndex(m => m.slot === slot)
        if (idx !== -1) {
          d.meals[idx] = { ...d.meals[idx], meal_id: meal?.id || null }
        } else {
          d.meals = [...(d.meals||[]), { slot, meal_id: meal?.id || null }]
        }
      }
      setWeekStructure(updated)
      if (meal?.id) setMealsMap(prev => ({ ...prev, [meal.id]: meal }))

      // Persist override
      await saveClientMealSwap({ plan_id: plan.id, client_id: client.id, day_index: dayIndex, slot, meal_id: meal?.id || null })

      setSwapSlot(null)
      setSwapSuggestions([])
    } catch (e) {
      console.error(e)
      setError(e.message || 'Swap mislukt')
    }
  }
  async function openSwap(dayIndex, slot, targetKcal){
    setSwapSlot({ dayIndex, slot, targetKcal })
    try { setSwapSuggestions(await listMealsNearCalories(targetKcal||0, 150, 30)) }
    catch(e){ console.error(e); setSwapSuggestions([]) }
  }

  // =============== ADD MEAL ===============
  function openAddMeal(dayIndex){ setMealPicker({ dayIndex }); setSearch(''); setSearchResults([]) }

  useEffect(()=>{
    if (!mealPicker) return
    clearTimeout(searchDebounce.current)
    searchDebounce.current = setTimeout(async()=>{
      try {
        const results = await getMeals({ q: search || '', tags: [], limit: 50 })
        setSearchResults(results || [])
      } catch(e){ console.error(e); setSearchResults([]) }
    }, 250)
    return ()=> clearTimeout(searchDebounce.current)
  }, [search, mealPicker])

  async function addMealToDay(meal){
    if (!mealPicker) return
    const dayIndex = mealPicker.dayIndex
    const updated = [...weekStructure]
    const d = updated[dayIndex] || { day: `Day ${dayIndex+1}`, meals: [] }
    const currentSlots = (d.meals||[]).map(m=>m.slot)
    const nextSlot = currentSlots.length ? Math.max(...currentSlots) + 1 : 1
    d.meals = [...(d.meals||[]), { slot: nextSlot, meal_id: meal.id }]
    updated[dayIndex] = d
    setWeekStructure(updated)
    setMealsMap(prev => ({ ...prev, [meal.id]: meal }))

    // Persist new meal as an override (new slot)
    await saveClientMealSwap({ plan_id: plan.id, client_id: client.id, day_index: dayIndex, slot: nextSlot, meal_id: meal.id })

    setMealPicker(null)
    // als de dag-popup open is, forceer refresh door showDay te updaten
    if (showDay && showDay.index === dayIndex) setShowDay({ ...showDay, day: updated[dayIndex] })
  }

  if (loading) return (
    <div className="myarc-animate-in">
      <h2 className="myarc-card-title">üçΩ {t('mealplan.title') || 'Jouw Mealplan'}</h2>
      <p className="myarc-text-gray">Laden‚Ä¶</p>
    </div>
  )
  if (error) return (
    <div className="myarc-animate-in">
      <h2 className="myarc-card-title">üçΩ {t('mealplan.title') || 'Jouw Mealplan'}</h2>
      <div className="myarc-alert myarc-alert-error">{error}</div>
    </div>
  )
  if (!plan) return (
    <div className="myarc-animate-in">
      <h2 className="myarc-card-title">üçΩ {t('mealplan.title') || 'Jouw Mealplan'}</h2>
      <p className="myarc-text-gray">Er is nog geen mealplan aan je gekoppeld.</p>
    </div>
  )

  const activeDays = weeks[activeWeek] || []
  const weekStart = addDays(startDate, activeWeek*7)

  const allMealsForWeek = activeDays.flatMap(d => (d?.meals||[]).map(m => mealsMap[m.meal_id]).filter(Boolean))
  const weekTotals = sumMacros(allMealsForWeek)

  return (
    <div className="myarc-animate-in">
      {/* Header with video */}
      <div className="myarc-card" style={{marginBottom:'var(--s-6)'}}>
        <div className="myarc-card-header" style={{background:'linear-gradient(135deg,#064e3b,#0a5c42)'}}>
          <h2 className="myarc-card-title" style={{color:'#fff'}}>üçΩ {t('mealplan.title') || 'Jouw Mealplan'}</h2>
          <div className="myarc-text-xs" style={{color:'#d1fae5'}}>Week {activeWeek+1} ‚Ä¢ {formatDate(weekStart)} ‚Äì {formatDate(addDays(weekStart,6))}</div>
        </div>
        <div className="myarc-p-md">
          <div className="myarc-video-wrapper" style={{border:'1px solid #10b98133', borderRadius:'var(--radius)'}}>
            <video src={videoUrl} controls style={{width:'100%', borderRadius:'var(--radius)'}} />
          </div>
          <p className="myarc-text-gray myarc-mt-sm">{notes}</p>
        </div>
      </div>

      {/* Week Switcher */}
      <div className="myarc-flex myarc-gap-sm myarc-mb-md">
        {[0,1,2,3].map(w => (
          <button key={w}
            className={`myarc-btn ${activeWeek===w?'myarc-btn-primary':'myarc-btn-outline'}`}
            onClick={()=>setActiveWeek(w)}>
            Week {w+1}
          </button>
        ))}
        <div className="myarc-flex-1"/>
        <button className="myarc-btn myarc-btn-secondary" onClick={()=>setEditMode(v=>!v)}>
          {editMode ? '‚úÖ Klaar met bewerken' : '‚úèÔ∏è Bewerk mijn mealplan'}
        </button>
      </div>

      {/* Week Grid */}
      <div className="myarc-grid myarc-grid-2 myarc-grid-lg-4 myarc-gap-md">
        {activeDays.map((day, i) => {
          const date = addDays(weekStart, i)
          const meals = (day?.meals||[]).map(m => mealsMap[m.meal_id]).filter(Boolean)
          const totals = sumMacros(meals)
          return (
            <div key={i} className="myarc-card" style={{cursor:'pointer'}} onClick={()=>openDay(activeWeek, i)}>
              <div className="myarc-card-header">
                <div className="myarc-card-title">{formatDate(date)}</div>
                <div className="myarc-text-gray">{meals.length} maaltijden</div>
              </div>
              <div className="myarc-p-md">
                {meals.slice(0,3).map(m => (
                  <div key={m.id} className="myarc-flex myarc-justify-between myarc-mb-xs" style={{borderBottom:'1px solid #10b98133'}}>
                    <span>{m.name}</span>
                    <span className="myarc-text-gray">{m.kcal} kcal</span>
                  </div>
                ))}
                {meals.length>3 && <div className="myarc-text-xs myarc-text-gray">+{meals.length-3} meer‚Ä¶</div>}
                <div className="myarc-text-xs myarc-mt-sm">‚ö° {totals.kcal} kcal ‚Ä¢ ü•© {totals.protein}P ‚Ä¢ üçö {totals.carbs}C ‚Ä¢ ü•ë {totals.fat}F</div>
              </div>
            </div>
          )
        })}
      </div>

      {/* Weekly macro summary */}
      <div className="myarc-card myarc-mt-md">
        <div className="myarc-card-header"><div className="myarc-card-title">Week totalen</div></div>
        <div className="myarc-p-md myarc-text-gray">‚ö° {weekTotals.kcal} kcal ‚Ä¢ ü•© {weekTotals.protein}P ‚Ä¢ üçö {weekTotals.carbs}C ‚Ä¢ ü•ë {weekTotals.fat}F</div>
      </div>

      {/* Day Popup */}
      {showDay && (
        <div style={{position:'fixed', inset:0, background:'rgba(0,0,0,0.8)', zIndex:1000, display:'flex', alignItems:'center', justifyContent:'center'}}>
          <div className="myarc-card" style={{maxWidth: '720px', width:'92%'}}>
            {/* Header with day totals */}
            <div className="myarc-flex myarc-items-center myarc-justify-between myarc-p-md" style={{background:'linear-gradient(135deg,#064e3b,#0a5c42)', borderTopLeftRadius:'var(--radius)', borderTopRightRadius:'var(--radius)'}}>
              <div>
                <div className="myarc-card-title" style={{color:'#fff'}}>Dag {showDay.index+1}</div>
                {(() => {
                  const meals = (showDay.day?.meals||[]).map(s=>mealsMap[s.meal_id]).filter(Boolean)
                  const t = sumMacros(meals)
                  return <div className="myarc-text-xs" style={{color:'#d1fae5'}}>‚ö° {t.kcal} ‚Ä¢ ü•© {t.protein}P ‚Ä¢ üçö {t.carbs}C ‚Ä¢ ü•ë {t.fat}F</div>
                })()}
              </div>
              <div className="myarc-flex myarc-gap-sm">
                {editMode && (
                  <button className="myarc-btn myarc-btn-secondary" onClick={(e)=>{e.stopPropagation(); openAddMeal(showDay.index)}}>‚ûï Voeg maaltijd toe</button>
                )}
                <button className="myarc-btn myarc-btn-outline" onClick={closeDay}>‚úï</button>
              </div>
            </div>
            <div className="myarc-p-md">
              {(showDay.day?.meals||[]).sort((a,b)=>a.slot-b.slot).map((slot) => {
                const m = mealsMap[slot.meal_id]
                if (!m) return (
                  <div key={slot.slot} className="myarc-flex myarc-justify-between myarc-items-center myarc-mb-sm" style={{border:'1px solid #10b98133', borderRadius:'var(--radius)', padding:'0.5rem'}}>
                    <div>
                      <div className="myarc-text-gray">Leeg slot #{slot.slot}</div>
                    </div>
                    {editMode && (
                      <button className="myarc-btn myarc-btn-secondary" onClick={(e)=>{e.stopPropagation(); openSwap(showDay.index, slot.slot, 500)}}>üîÑ Swap</button>
                    )}
                  </div>
                )
                return (
                  <div key={slot.slot} className="myarc-card myarc-mb-sm" style={{border:'1px solid #10b98133'}}>
                    <div className="myarc-flex myarc-justify-between myarc-items-center myarc-p-sm">
                      <div>
                        <div className="myarc-text-green" style={{fontWeight:'bold'}}>{m.name}</div>
                        <div className="myarc-text-xs myarc-text-gray">‚ö° {m.kcal} kcal ‚Ä¢ ü•© {m.protein}P ‚Ä¢ üçö {m.carbs}C ‚Ä¢ ü•ë {m.fat}F</div>
                      </div>
                      {editMode && (
                        <button className="myarc-btn myarc-btn-secondary" onClick={(e)=>{e.stopPropagation(); openSwap(showDay.index, slot.slot, m.kcal)}}>üîÑ Swap</button>
                      )}
                    </div>
                    {Array.isArray(m.ingredients) && m.ingredients.length>0 && (
                      <div className="myarc-p-sm myarc-text-xs myarc-text-gray">
                        <div style={{marginBottom:4}}>Ingredi√´nten:</div>
                        <ul style={{margin:0, paddingLeft:'1rem'}}>
                          {m.ingredients.map((ing, idx)=>(
                            <li key={idx}>{ing.name || ing.item} {ing.weight ? `‚Ä¢ ${ing.weight}g` : ''}</li>
                          ))}
                        </ul>
                      </div>
                    )}
                    {m.instructions && (
                      <div className="myarc-p-sm myarc-text-xs myarc-text-gray">
                        <div style={{marginBottom:4}}>Bereiding:</div>
                        <div>{m.instructions}</div>
                      </div>
                    )}
                  </div>
                )
              })}

              {/* Inline Swap Suggestions */}
              {editMode && swapSlot && (
                <div className="myarc-card myarc-mt-md" style={{border:'1px solid #10b98133'}}>
                  <div className="myarc-card-header"><div className="myarc-card-title">Suggesties rond {swapSlot.targetKcal || 0} kcal</div></div>
                  <div className="myarc-p-md">
                    {swapSuggestions?.length ? (
                      <div className="myarc-flex myarc-flex-col myarc-gap-sm">
                        {swapSuggestions.map(s => (
                          <div key={s.id} className="myarc-flex myarc-justify-between myarc-items-center" style={{borderBottom:'1px solid #10b98122', paddingBottom:6}}>
                            <div>
                              <div style={{fontWeight:'600'}}>{s.name}</div>
                              <div className="myarc-text-xs myarc-text-gray">‚ö° {s.kcal} ‚Ä¢ ü•© {s.protein}P ‚Ä¢ üçö {s.carbs}C ‚Ä¢ ü•ë {s.fat}F</div>
                            </div>
                            <button className="myarc-btn myarc-btn-primary" onClick={()=>handleSwapPick(s)}>Kies</button>
                          </div>
                        ))}
                      </div>
                    ) : (
                      <div className="myarc-text-gray">Geen suggesties gevonden.</div>
                    )}
                  </div>
                </div>
              )}

            </div>
          </div>
        </div>
      )}

      {/* Add-Meal Picker Modal */}
      {mealPicker && (
        <div style={{position:'fixed', inset:0, background:'rgba(0,0,0,0.8)', zIndex:1100, display:'flex', alignItems:'center', justifyContent:'center'}}>
          <div className="myarc-card" style={{maxWidth: '760px', width:'94%', maxHeight:'80vh', overflow:'hidden'}}>
            <div className="myarc-flex myarc-items-center myarc-justify-between myarc-p-md" style={{background:'linear-gradient(135deg,#064e3b,#0a5c42)'}}>
              <div className="myarc-card-title" style={{color:'#fff'}}>‚ûï Maaltijd toevoegen</div>
              <button className="myarc-btn myarc-btn-outline" onClick={()=>setMealPicker(null)}>‚úï</button>
            </div>
            <div className="myarc-p-md" style={{borderTop:'1px solid #10b98133'}}>
              <input
                value={search}
                onChange={e=>setSearch(e.target.value)}
                placeholder="Zoek maaltijd (bv. kip, pasta, yoghurt)"
                className="myarc-input"
                style={{width:'100%', marginBottom:'0.75rem'}}
              />
              <div style={{maxHeight:'56vh', overflow:'auto'}}>
                {searchResults?.length ? searchResults.map(m => (
                  <div key={m.id} className="myarc-flex myarc-justify-between myarc-items-center myarc-p-sm" style={{borderBottom:'1px solid #10b98122'}}>
                    <div>
                      <div style={{fontWeight:'600'}}>{m.name}</div>
                      <div className="myarc-text-xs myarc-text-gray">‚ö° {m.kcal} ‚Ä¢ ü•© {m.protein}P ‚Ä¢ üçö {m.carbs}C ‚Ä¢ ü•ë {m.fat}F</div>
                    </div>
                    <button className="myarc-btn myarc-btn-primary" onClick={()=>addMealToDay(m)}>Toevoegen</button>
                  </div>
                )) : <div className="myarc-text-gray">Geen resultaten. Typ om te zoeken‚Ä¶</div>}
              </div>
            </div>
          </div>
        </div>
      )}

      {/* ===== BOTTOM: Templates info/placeholder ===== */}
      <div className="myarc-card myarc-mt-lg">
        <div className="myarc-card-header"><div className="myarc-card-title">Templates</div></div>
        <div className="myarc-p-md myarc-text-gray">
          Dit is een client-view. Templatebeheer staat in het coach gedeelte en is bewust naar **onderaan** verplaatst.
        </div>
      </div>
    </div>
  )
}

