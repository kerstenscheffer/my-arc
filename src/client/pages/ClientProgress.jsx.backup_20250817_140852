// src/client/pages/ClientProgress.jsx
// MY ARC Client Progress - WORKING VERSION with SUPABASE 🔥
import { useState, useEffect } from 'react'
import { useLanguage } from '../../contexts/LanguageContext'
import { getClientSchema, supabase } from '../../lib/supabase'

// ===== HELPER FUNCTIONS =====
const getTodayDate = () => {
  return new Date().toISOString().split('T')[0]
}

const getWeekDates = (startDate) => {
  const dates = []
  const start = new Date(startDate)
  start.setDate(start.getDate() - start.getDay() + 1) // Start on Monday
  
  for (let i = 0; i < 7; i++) {
    const date = new Date(start)
    date.setDate(start.getDate() + i)
    dates.push(date.toISOString().split('T')[0])
  }
  
  return dates
}

const formatSets = (sets) => {
  if (!sets || sets.length === 0) return 'Geen sets'
  return sets.map(set => `${set.reps}x${set.weight}kg`).join(', ')
}

const getSuggestionText = (suggestion, language = 'nl') => {
  const suggestions = {
    'increase_weight': language === 'nl' ? 'Verhoog het gewicht' : 'Increase weight',
    'decrease_weight': language === 'nl' ? 'Verlaag het gewicht' : 'Decrease weight', 
    'maintain_weight': language === 'nl' ? 'Houd gewicht gelijk' : 'Maintain weight',
    'more_reps': language === 'nl' ? 'Meer herhalingen' : 'More reps'
  }
  return suggestions[suggestion] || suggestion
}

// ===== DATABASE FUNCTIONS =====
const logWorkoutProgress = async ({ clientId, date, exerciseName, sets, notes }) => {
  try {
    const { data, error } = await supabase
      .from('workout_progress')
      .insert([{
        client_id: clientId,
        date: date,
        exercise_name: exerciseName,
        sets: sets,
        notes: notes || '',
        created_at: new Date().toISOString()
      }])

    if (error) {
      console.error('Error logging workout progress:', error)
      throw error
    }
    
    return data
  } catch (error) {
    console.error('Error in logWorkoutProgress:', error)
    throw error
  }
}

const getClientProgressByDate = async (clientId, date) => {
  try {
    const { data, error } = await supabase
      .from('workout_progress')
      .select('*')
      .eq('client_id', clientId)
      .eq('date', date)
      .order('created_at', { ascending: false })

    if (error) {
      console.error('Error getting client progress:', error)
      return []
    }
    
    return data || []
  } catch (error) {
    console.error('Error in getClientProgressByDate:', error)
    return []
  }
}

const getExerciseProgress = async (clientId, exerciseName, limit = 10) => {
  try {
    const { data, error } = await supabase
      .from('workout_progress')
      .select('*')
      .eq('client_id', clientId)
      .eq('exercise_name', exerciseName)
      .order('date', { ascending: false })
      .limit(limit)

    if (error) {
      console.error('Error getting exercise progress:', error)
      return []
    }
    
    return data || []
  } catch (error) {
    console.error('Error in getExerciseProgress:', error)
    return []
  }
}

const getClientExercises = async (clientId) => {
  try {
    const { data, error } = await supabase
      .from('workout_progress')
      .select('exercise_name')
      .eq('client_id', clientId)

    if (error) {
      console.error('Error getting client exercises:', error)
      return []
    }
    
    const uniqueExercises = [...new Set(data.map(item => item.exercise_name))].sort()
    return uniqueExercises
  } catch (error) {
    console.error('Error in getClientExercises:', error)
    return []
  }
}

// ===== AI EXERCISE DATABASE =====
const AI_EXERCISE_DATABASE = [
  // Chest
  'Machine Chest Press', 'Incline Dumbbell Press', 'Barbell Bench Press', 'Weighted Dips',
  'Incline Cable Flies', 'Machine Pec Deck', 'Flat Dumbbell Bench Press',
  
  // Back  
  'Lat Pulldown', 'Weighted Pull-Ups', 'T-Bar Row', 'Cable Row', 'Barbell Bent-Over Row',
  'Single-Arm Dumbbell Row', 'Face Pulls', 'Cable Pullovers',
  
  // Shoulders
  'Machine Shoulder Press', 'Dumbbell Shoulder Press', 'Overhead Press', 'Cable Lateral Raises',
  'Machine Lateral Raises', 'Dumbbell Lateral Raises', 'Rear Delt Flies',
  
  // Legs
  'Leg Press', 'Romanian Deadlift', 'Hip Thrust', 'High-Bar Back Squat', 'Bulgarian Split Squat',
  'Hack Squat', 'Leg Extension', 'Leg Curl', 'Calf Raises',
  
  // Arms
  'Incline Dumbbell Curl', 'Cable Bicep Curls', 'Preacher Curls', 'Hammer Curls', 'Barbell Curls',
  'Cable Overhead Triceps Extension', 'Triceps Pushdown', 'Close-Grip Bench Press', 'Dumbbell Overhead Extension'
]

// ===== PROGRESS CHART COMPONENT =====
const ProgressChart = ({ exerciseHistory }) => {
  if (!exerciseHistory || exerciseHistory.length < 2) {
    return (
      <div style={{
        display: 'flex',
        alignItems: 'center',
        justifyContent: 'center',
        height: '100%',
        color: 'rgba(255,255,255,0.6)',
        fontSize: '0.875rem'
      }}>
        {exerciseHistory.length === 0 ? '📊 Nog geen data' : '📈 Meer data nodig voor grafiek'}
      </div>
    )
  }

  // Sort by date and get max weight per workout
  const sortedHistory = exerciseHistory
    .map(workout => ({
      date: new Date(workout.date),
      maxWeight: Math.max(...workout.sets.map(set => set.weight || 0)),
      workout: workout
    }))
    .sort((a, b) => a.date - b.date)

  // Chart dimensions
  const width = 280
  const height = 120
  const padding = { top: 10, right: 10, bottom: 25, left: 25 }
  const chartWidth = width - padding.left - padding.right
  const chartHeight = height - padding.top - padding.bottom

  // Get min/max values for scaling
  const weights = sortedHistory.map(d => d.maxWeight)
  const minWeight = Math.min(...weights)
  const maxWeight = Math.max(...weights)
  const weightRange = maxWeight - minWeight || 1

  // Create scales
  const xScale = (index) => (index / (sortedHistory.length - 1)) * chartWidth
  const yScale = (weight) => chartHeight - ((weight - minWeight) / weightRange) * chartHeight

  // Generate path for line
  const pathData = sortedHistory
    .map((d, i) => `${i === 0 ? 'M' : 'L'} ${xScale(i)} ${yScale(d.maxWeight)}`)
    .join(' ')

  return (
    <div style={{ position: 'relative', width: '100%', height: '100%' }}>
      <svg 
        width="100%" 
        height="100%" 
        viewBox={`0 0 ${width} ${height}`}
        style={{ overflow: 'visible' }}
      >
        {/* Grid lines */}
        {[0, 0.25, 0.5, 0.75, 1].map(percent => (
          <line
            key={`grid-y-${percent}`}
            x1={padding.left}
            y1={padding.top + percent * chartHeight}
            x2={padding.left + chartWidth}
            y2={padding.top + percent * chartHeight}
            stroke="rgba(255,255,255,0.1)"
            strokeWidth="0.5"
          />
        ))}

        {/* Y-axis labels */}
        {[0, 0.5, 1].map(percent => {
          const weight = minWeight + percent * weightRange
          return (
            <text
              key={`y-label-${percent}`}
              x={padding.left - 5}
              y={padding.top + (1 - percent) * chartHeight + 3}
              fill="rgba(255,255,255,0.6)"
              fontSize="10"
              textAnchor="end"
            >
              {weight.toFixed(0)}kg
            </text>
          )
        })}

        {/* Progress line */}
        <path
          d={pathData}
          fill="none"
          stroke="#10b981"
          strokeWidth="2"
          strokeLinecap="round"
          strokeLinejoin="round"
          style={{
            filter: 'drop-shadow(0 0 4px rgba(16, 185, 129, 0.4))'
          }}
          transform={`translate(${padding.left}, ${padding.top})`}
        />

        {/* Data points */}
        {sortedHistory.map((d, i) => (
          <g key={i}>
            <circle
              cx={padding.left + xScale(i)}
              cy={padding.top + yScale(d.maxWeight)}
              r="4"
              fill="#10b981"
              stroke="#fff"
              strokeWidth="1.5"
              style={{
                filter: 'drop-shadow(0 1px 2px rgba(0,0,0,0.3))'
              }}
            />
            
            <text
              x={padding.left + xScale(i)}
              y={padding.top + yScale(d.maxWeight) - 8}
              fill="#10b981"
              fontSize="9"
              textAnchor="middle"
              fontWeight="600"
              style={{
                opacity: i === sortedHistory.length - 1 ? 1 : 0
              }}
            >
              {d.maxWeight}kg
            </text>
          </g>
        ))}

        {/* X-axis dates */}
        {sortedHistory.map((d, i) => {
          if (i !== 0 && i !== sortedHistory.length - 1) return null
          
          return (
            <text
              key={`x-label-${i}`}
              x={padding.left + xScale(i)}
              y={height - 5}
              fill="rgba(255,255,255,0.6)"
              fontSize="9"
              textAnchor="middle"
            >
              {d.date.toLocaleDateString('nl-NL', { 
                month: 'short', 
                day: 'numeric' 
              })}
            </text>
          )
        })}
      </svg>

      {/* Progress indicator */}
      <div style={{
        position: 'absolute',
        top: '5px',
        right: '5px',
        display: 'flex',
        alignItems: 'center',
        gap: '0.25rem',
        fontSize: '0.75rem',
        color: 'rgba(255,255,255,0.8)'
      }}>
        {sortedHistory.length > 1 && (
          <>
            <span style={{
              color: sortedHistory[sortedHistory.length - 1].maxWeight > sortedHistory[0].maxWeight ? '#10b981' : '#ef4444'
            }}>
              {sortedHistory[sortedHistory.length - 1].maxWeight > sortedHistory[0].maxWeight ? '📈' : '📉'}
            </span>
            <span>
              {((sortedHistory[sortedHistory.length - 1].maxWeight - sortedHistory[0].maxWeight) > 0 ? '+' : '')}
              {(sortedHistory[sortedHistory.length - 1].maxWeight - sortedHistory[0].maxWeight).toFixed(1)}kg
            </span>
          </>
        )}
      </div>
    </div>
  )
}

// ===== MAIN COMPONENT =====
export default function ClientProgress({ client, schema }) {
  const { t, language } = useLanguage()
  const isMobile = window.innerWidth <= 768
  
  // State management
  const [currentWeek, setCurrentWeek] = useState(0)
  const [selectedDate, setSelectedDate] = useState(null)
  const [weekDates, setWeekDates] = useState([])
  const [weekProgress, setWeekProgress] = useState({})
  const [showWorkoutModal, setShowWorkoutModal] = useState(false)
  const [selectedExercise, setSelectedExercise] = useState('')
  const [exerciseHistory, setExerciseHistory] = useState([])
  const [clientExercises, setClientExercises] = useState([])
  const [loading, setLoading] = useState(true)
  
  // Exercise search state
  const [exerciseSearchTerm, setExerciseSearchTerm] = useState('')
  const [showExerciseDropdown, setShowExerciseDropdown] = useState(false)
  const [smartSuggestion, setSmartSuggestion] = useState(null)
  
  // Workout logging state
  const [workoutForm, setWorkoutForm] = useState({
    exerciseName: '',
    sets: [{ reps: '', weight: '' }],
    notes: ''
  })

  // Initialize week dates
  useEffect(() => {
    const today = new Date()
    today.setDate(today.getDate() + (currentWeek * 7))
    const dates = getWeekDates(today)
    setWeekDates(dates)
    if (client?.id) {
      loadWeekProgress(dates)
    }
  }, [currentWeek, client])

  // Load client exercises
  useEffect(() => {
    if (client?.id) {
      loadClientExercises()
    }
  }, [client])

  const loadClientExercises = async () => {
    try {
      const dbExercises = await getClientExercises(client.id)
      const allExercises = [...new Set([...dbExercises, ...AI_EXERCISE_DATABASE])].sort()
      setClientExercises(allExercises)
    } catch (error) {
      console.error('Error loading exercises:', error)
      setClientExercises(AI_EXERCISE_DATABASE)
    }
  }

  const loadWeekProgress = async (dates) => {
    try {
      setLoading(true)
      const progressData = {}
      
      for (const date of dates) {
        const dayProgress = await getClientProgressByDate(client.id, date)
        progressData[date] = dayProgress
      }
      
      setWeekProgress(progressData)
    } catch (error) {
      console.error('Error loading week progress:', error)
    } finally {
      setLoading(false)
    }
  }

  const loadExerciseHistory = async (exerciseName) => {
    try {
      const history = await getExerciseProgress(client.id, exerciseName, 10)
      setExerciseHistory(history)
      
      // Generate smart suggestion
      if (history.length > 0) {
        generateSmartSuggestion(history[0])
      }
    } catch (error) {
      console.error('Error loading exercise history:', error)
    }
  }

  const generateSmartSuggestion = (lastWorkout) => {
    if (!lastWorkout?.sets?.length) return

    const avgReps = lastWorkout.sets.reduce((sum, set) => sum + (set.reps || 0), 0) / lastWorkout.sets.length
    const maxWeight = Math.max(...lastWorkout.sets.map(set => set.weight || 0))

    if (avgReps >= 12) {
      setSmartSuggestion({
        type: 'increase_weight',
        message: `🔥 Geweldig! Je haalde gemiddeld ${Math.round(avgReps)} reps. Tijd voor meer gewicht!`,
        suggestion: `Probeer ${maxWeight + 2.5}kg vandaag`
      })
    } else if (avgReps <= 6) {
      setSmartSuggestion({
        type: 'decrease_weight',
        message: `📉 ${Math.round(avgReps)} reps is zwaar. Probeer lichter gewicht.`,
        suggestion: `Probeer ${Math.max(maxWeight - 2.5, 0)}kg voor meer reps`
      })
    } else {
      setSmartSuggestion({
        type: 'maintain',
        message: `✅ Perfect! ${Math.round(avgReps)} reps zit in de sweet spot.`,
        suggestion: `Houd ${maxWeight}kg aan en focus op vorm!`
      })
    }
  }

  const openWorkoutModal = (date) => {
    setSelectedDate(date)
    setShowWorkoutModal(true)
    setWorkoutForm({
      exerciseName: '',
      sets: [{ reps: '', weight: '' }],
      notes: ''
    })
    setExerciseHistory([])
    setSmartSuggestion(null)
  }

  const closeWorkoutModal = () => {
    setShowWorkoutModal(false)
    setSelectedDate(null)
    setWorkoutForm({
      exerciseName: '',
      sets: [{ reps: '', weight: '' }],
      notes: ''
    })
    setExerciseHistory([])
    setExerciseSearchTerm('')
    setShowExerciseDropdown(false)
    setSmartSuggestion(null)
  }

  const selectExercise = async (exerciseName) => {
    setWorkoutForm(prev => ({ ...prev, exerciseName }))
    setSelectedExercise(exerciseName)
    setExerciseSearchTerm(exerciseName)
    setShowExerciseDropdown(false)
    
    if (exerciseName) {
      await loadExerciseHistory(exerciseName)
    }
  }

  const updateSet = (index, field, value) => {
    setWorkoutForm(prev => ({
      ...prev,
      sets: prev.sets.map((set, i) => 
        i === index ? { ...set, [field]: value } : set
      )
    }))
  }

  const addSet = () => {
    setWorkoutForm(prev => ({
      ...prev,
      sets: [...prev.sets, { reps: '', weight: '' }]
    }))
  }

  const removeSet = (index) => {
    if (workoutForm.sets.length > 1) {
      setWorkoutForm(prev => ({
        ...prev,
        sets: prev.sets.filter((_, i) => i !== index)
      }))
    }
  }

  const saveWorkout = async () => {
    if (!workoutForm.exerciseName || !workoutForm.sets.some(set => set.reps && set.weight)) {
      alert('Vul alle verplichte velden in!')
      return
    }

    try {
      const validSets = workoutForm.sets.filter(set => set.reps && set.weight)
      
      await logWorkoutProgress({
        clientId: client.id,
        date: selectedDate,
        exerciseName: workoutForm.exerciseName,
        sets: validSets.map(set => ({
          reps: parseInt(set.reps),
          weight: parseFloat(set.weight)
        })),
        notes: workoutForm.notes
      })

      // Refresh data
      await loadWeekProgress(weekDates)
      await loadClientExercises()
      
      closeWorkoutModal()
      alert('Workout opgeslagen! 💪')
    } catch (error) {
      console.error('Error saving workout:', error)
      alert('Error bij opslaan. Probeer opnieuw.')
    }
  }

  const getFilteredExercises = () => {
    if (!exerciseSearchTerm) return clientExercises.slice(0, 10)
    
    return clientExercises.filter(exercise =>
      exercise.toLowerCase().includes(exerciseSearchTerm.toLowerCase())
    ).slice(0, 15)
  }

  // Helper functions
  const getDayName = (date) => {
    const days = ['Zo', 'Ma', 'Di', 'Wo', 'Do', 'Vr', 'Za']
    return days[new Date(date).getDay()]
  }

  const getDayNumber = (date) => {
    return new Date(date).getDate()
  }

  const isToday = (date) => {
    return date === getTodayDate()
  }

  const getDayProgressCount = (date) => {
    return weekProgress[date]?.length || 0
  }

  if (loading) {
    return (
      <div style={{
        padding: isMobile ? '0.5rem' : '1rem',
        display: 'flex',
        justifyContent: 'center',
        alignItems: 'center',
        minHeight: '200px',
        color: 'rgba(255,255,255,0.7)'
      }}>
        📊 Progressie data laden...
      </div>
    )
  }

  return (
    <div style={{
      padding: isMobile ? '0.5rem' : '1rem',
      maxWidth: '100%',
      overflow: 'hidden'
    }}>
      {/* Header */}
      <div style={{
        background: 'linear-gradient(135deg, #064e3b 0%, #0a5c42 100%)',
        padding: isMobile ? '0.75rem' : '1rem',
        borderRadius: '8px',
        marginBottom: '1rem',
        boxShadow: '0 1px 3px rgba(0,0,0,0.1)',
        border: '1px solid #10b98133'
      }}>
        <h2 style={{
          color: '#fff',
          fontSize: isMobile ? '1.25rem' : '1.5rem',
          fontWeight: '700',
          margin: 0,
          marginBottom: '0.5rem'
        }}>
          📊 Progress Tracker
        </h2>
        <p style={{
          color: 'rgba(255,255,255,0.8)',
          fontSize: '0.875rem',
          margin: 0
        }}>
          Track je workouts en zie je progressie met grafieken
        </p>
      </div>

      {/* Week Navigation */}
      <div style={{
        display: 'flex',
        justifyContent: 'space-between',
        alignItems: 'center',
        marginBottom: '1rem',
        background: 'rgba(255,255,255,0.05)',
        padding: '0.75rem',
        borderRadius: '8px',
        boxShadow: '0 1px 3px rgba(0,0,0,0.1)'
      }}>
        <button
          onClick={() => setCurrentWeek(prev => prev - 1)}
          style={{
            background: '#10b981',
            color: '#fff',
            border: 'none',
            borderRadius: '6px',
            padding: '0.5rem 0.75rem',
            fontSize: '0.875rem',
            cursor: 'pointer',
            fontWeight: '600'
          }}
        >
          ← Vorige
        </button>
        
        <div style={{
          color: '#fff',
          fontSize: '0.875rem',
          fontWeight: '600',
          textAlign: 'center'
        }}>
          {currentWeek === 0 ? 'Deze Week' : 
           currentWeek > 0 ? `${currentWeek} week${currentWeek > 1 ? 'en' : ''} verder` :
           `${Math.abs(currentWeek)} week${Math.abs(currentWeek) > 1 ? 'en' : ''} terug`}
        </div>
        
        <button
          onClick={() => setCurrentWeek(prev => prev + 1)}
          style={{
            background: '#10b981',
            color: '#fff',
            border: 'none',
            borderRadius: '6px',
            padding: '0.5rem 0.75rem',
            fontSize: '0.875rem',
            cursor: 'pointer',
            fontWeight: '600'
          }}
        >
          Volgende →
        </button>
      </div>

      {/* Week Grid */}
      <div style={{
        display: isMobile ? 'flex' : 'grid',
        gridTemplateColumns: isMobile ? 'none' : 'repeat(7, 1fr)',
        gap: isMobile ? '0.3rem' : '0.5rem',
        overflowX: isMobile ? 'auto' : 'visible',
        marginBottom: '1rem',
        paddingBottom: isMobile ? '0.5rem' : '0'
      }}>
        {weekDates.map(date => {
          const progressCount = getDayProgressCount(date)
          
          return (
            <div
              key={date}
              onClick={() => openWorkoutModal(date)}
              style={{
                minWidth: isMobile ? '120px' : 'auto',
                background: 'linear-gradient(135deg, #064e3b 0%, #0a5c42 100%)',
                padding: '0.75rem',
                borderRadius: '8px',
                cursor: 'pointer',
                transition: 'all 0.2s ease',
                border: isToday(date) ? '2px solid #10b981' : '1px solid #10b98133',
                boxShadow: '0 1px 3px rgba(0,0,0,0.1)',
                textAlign: 'center'
              }}
              onMouseEnter={(e) => {
                e.target.style.transform = 'translateY(-2px)'
                e.target.style.boxShadow = '0 4px 12px rgba(0,0,0,0.2)'
              }}
              onMouseLeave={(e) => {
                e.target.style.transform = 'translateY(0)'
                e.target.style.boxShadow = '0 1px 3px rgba(0,0,0,0.1)'
              }}
            >
              <div style={{
                color: '#fff',
                fontSize: '0.75rem',
                fontWeight: '600',
                marginBottom: '0.25rem'
              }}>
                {getDayName(date)}
              </div>
              
              <div style={{
                color: '#fff',
                fontSize: '1.25rem',
                fontWeight: '700',
                marginBottom: '0.5rem'
              }}>
                {getDayNumber(date)}
              </div>
              
              <div style={{
                color: progressCount > 0 ? '#10b981' : 'rgba(255,255,255,0.6)',
                fontSize: '0.75rem',
                fontWeight: '600'
              }}>
                {progressCount > 0 && (
                  <div>
                    ✅ {progressCount} workout{progressCount !== 1 ? 's' : ''}
                  </div>
                )}
                {progressCount === 0 && (
                  <div>
                    + Toevoegen
                  </div>
                )}
              </div>
            </div>
          )
        })}
      </div>

      {/* Progress Overview */}
      {Object.values(weekProgress).some(day => day.length > 0) && (
        <div style={{
          padding: '1rem',
          background: 'rgba(255,255,255,0.05)',
          borderRadius: '8px',
          boxShadow: '0 1px 3px rgba(0,0,0,0.1)',
          marginBottom: '1rem'
        }}>
          <h3 style={{
            color: '#fff',
            fontSize: '1.1rem',
            fontWeight: '600',
            marginBottom: '1rem'
          }}>
            📊 Week Overzicht
          </h3>
          
          {weekDates.map(date => {
            const dayProgress = weekProgress[date] || []
            if (dayProgress.length === 0) return null
            
            return (
              <div key={date} style={{ marginBottom: '0.75rem' }}>
                <div style={{
                  color: '#10b981',
                  fontSize: '0.875rem',
                  fontWeight: '600',
                  marginBottom: '0.25rem'
                }}>
                  {getDayName(date)} {getDayNumber(date)}
                </div>
                {dayProgress.map((workout, idx) => (
                  <div key={idx} style={{
                    background: 'rgba(255,255,255,0.05)',
                    padding: '0.5rem',
                    borderRadius: '6px',
                    marginBottom: '0.25rem',
                    fontSize: '0.875rem',
                    color: 'rgba(255,255,255,0.9)'
                  }}>
                    <strong>{workout.exercise_name}</strong>: {formatSets(workout.sets)}
                    {workout.notes && (
                      <div style={{ fontSize: '0.75rem', color: 'rgba(255,255,255,0.7)', marginTop: '0.25rem' }}>
                        📝 {workout.notes}
                      </div>
                    )}
                  </div>
                ))}
              </div>
            )
          })}
        </div>
      )}

      {/* Workout Modal */}
      {showWorkoutModal && (
        <div style={{
          position: 'fixed',
          top: 0,
          left: 0,
          right: 0,
          bottom: 0,
          background: 'rgba(0,0,0,0.8)',
          display: 'flex',
          justifyContent: 'center',
          alignItems: 'center',
          zIndex: 1000,
          padding: '1rem'
        }}>
          <div style={{
            background: '#1a1a1a',
            borderRadius: '12px',
            padding: '1.5rem',
            maxWidth: '500px',
            width: '100%',
            maxHeight: '90vh',
            overflowY: 'auto',
            border: '1px solid #10b98133'
          }}>
            {/* Modal Header */}
            <div style={{
              display: 'flex',
              justifyContent: 'space-between',
              alignItems: 'center',
              marginBottom: '1.5rem'
            }}>
              <h3 style={{
                color: '#fff',
                fontSize: '1.25rem',
                fontWeight: '600',
                margin: 0
              }}>
                💪 Log Workout
              </h3>
              
              <button
                onClick={closeWorkoutModal}
                style={{
                  background: 'transparent',
                  border: 'none',
                  color: '#fff',
                  fontSize: '1.5rem',
                  cursor: 'pointer'
                }}
              >
                ✕
              </button>
            </div>

            <div style={{
              color: '#10b981',
              fontSize: '0.875rem',
              fontWeight: '600',
              marginBottom: '1rem'
            }}>
              📅 {new Date(selectedDate).toLocaleDateString('nl-NL', { 
                weekday: 'long', 
                year: 'numeric', 
                month: 'long', 
                day: 'numeric' 
              })}
            </div>

            {/* Exercise Search */}
            <div style={{ marginBottom: '1rem' }}>
              <label style={{
                display: 'block',
                color: '#fff',
                fontSize: '0.875rem',
                fontWeight: '600',
                marginBottom: '0.5rem'
              }}>
                🔍 Zoek & Selecteer Oefening *
              </label>
              
              <div style={{ position: 'relative' }}>
                <input
                  type="text"
                  placeholder="Type om te zoeken naar oefeningen..."
                  value={exerciseSearchTerm}
                  onChange={(e) => setExerciseSearchTerm(e.target.value)}
                  onFocus={() => setShowExerciseDropdown(true)}
                  style={{
                    width: '100%',
                    padding: '0.75rem',
                    background: '#2a2a2a',
                    border: '1px solid #10b98133',
                    borderRadius: '6px',
                    color: '#fff',
                    fontSize: '0.875rem'
                  }}
                />
                
                {showExerciseDropdown && (
                  <div style={{
                    position: 'absolute',
                    top: '100%',
                    left: 0,
                    right: 0,
                    background: '#2a2a2a',
                    border: '1px solid #10b98133',
                    borderRadius: '6px',
                    marginTop: '0.25rem',
                    maxHeight: '200px',
                    overflowY: 'auto',
                    zIndex: 1000
                  }}>
                    {getFilteredExercises().map(exercise => (
                      <div
                        key={exercise}
                        onClick={() => selectExercise(exercise)}
                        style={{
                          padding: '0.75rem',
                          cursor: 'pointer',
                          borderBottom: '1px solid rgba(255,255,255,0.1)',
                          color: '#fff',
                          fontSize: '0.875rem'
                        }}
                        onMouseEnter={(e) => e.target.style.background = 'rgba(16,185,129,0.1)'}
                        onMouseLeave={(e) => e.target.style.background = 'transparent'}
                      >
                        🏋️ {exercise}
                      </div>
                    ))}
                    
                    {/* Add custom exercise option */}
                    {exerciseSearchTerm && !clientExercises.includes(exerciseSearchTerm) && (
                      <div
                        onClick={() => selectExercise(exerciseSearchTerm)}
                        style={{
                          padding: '0.75rem',
                          cursor: 'pointer',
                          borderBottom: '1px solid rgba(255,255,255,0.1)',
                          color: '#10b981',
                          fontSize: '0.875rem',
                          fontWeight: '600'
                        }}
                        onMouseEnter={(e) => e.target.style.background = 'rgba(16,185,129,0.1)'}
                        onMouseLeave={(e) => e.target.style.background = 'transparent'}
                      >
                        ➕ Nieuwe oefening: "{exerciseSearchTerm}"
                      </div>
                    )}
                  </div>
                )}
              </div>
            </div>

            {/* Selected Exercise Display */}
            {workoutForm.exerciseName && (
              <div style={{
                background: 'rgba(16, 185, 129, 0.1)',
                padding: '0.75rem',
                borderRadius: '6px',
                marginBottom: '1rem',
                border: '1px solid #10b98133'
              }}>
                <div style={{
                  color: '#10b981',
                  fontSize: '0.875rem',
                  fontWeight: '600',
                  marginBottom: '0.25rem'
                }}>
                  📋 Geselecteerde Oefening
                </div>
                <div style={{
                  color: '#fff',
                  fontSize: '1rem',
                  fontWeight: '600'
                }}>
                  {workoutForm.exerciseName}
                </div>
              </div>
            )}

            {/* Smart Suggestion */}
            {smartSuggestion && (
              <div style={{
                background: 'rgba(16, 185, 129, 0.1)',
                padding: '0.75rem',
                borderRadius: '6px',
                marginBottom: '1rem',
                border: '1px solid #10b98133'
              }}>
                <div style={{
                  display: 'flex',
                  alignItems: 'center',
                  marginBottom: '0.5rem'
                }}>
                  <span style={{ fontSize: '1.25rem', marginRight: '0.5rem' }}>
                    🤖
                  </span>
                  <span style={{
                    color: '#fff',
                    fontSize: '0.875rem',
                    fontWeight: '600'
                  }}>
                    AI Advies
                  </span>
                </div>
                <div style={{
                  color: '#fff',
                  fontSize: '0.875rem',
                  lineHeight: '1.4',
                  marginBottom: '0.5rem'
                }}>
                  {smartSuggestion.message}
                </div>
                <div style={{
                  color: '#10b981',
                  fontSize: '0.875rem',
                  fontWeight: '600'
                }}>
                  💡 {smartSuggestion.suggestion}
                </div>
              </div>
            )}

            {/* Progress Graph */}
            {exerciseHistory.length > 1 && (
              <div style={{
                background: 'rgba(255,255,255,0.05)',
                padding: '1rem',
                borderRadius: '8px',
                boxShadow: '0 1px 3px rgba(0,0,0,0.1)',
                marginBottom: '1rem'
              }}>
                <h3 style={{
                  color: '#fff',
                  fontSize: '1rem',
                  fontWeight: '600',
                  marginBottom: '1rem',
                  display: 'flex',
                  alignItems: 'center',
                  gap: '0.5rem'
                }}>
                  📈 Progress Grafiek - {workoutForm.exerciseName}
                </h3>
                
                <div style={{
                  position: 'relative',
                  height: '150px',
                  background: '#1a1a1a',
                  borderRadius: '6px',
                  padding: '1rem',
                  overflow: 'hidden'
                }}>
                  <ProgressChart exerciseHistory={exerciseHistory} />
                </div>
                
                <div style={{
                  display: 'flex',
                  justifyContent: 'space-between',
                  marginTop: '0.5rem',
                  fontSize: '0.75rem',
                  color: 'rgba(255,255,255,0.6)'
                }}>
                  <span>📅 {exerciseHistory.length} workouts</span>
                  <span>💪 Laatste: {Math.max(...exerciseHistory[0].sets.map(s => s.weight || 0))}kg</span>
                </div>
              </div>
            )}

            {/* Sets Input */}
            <div style={{ marginBottom: '1rem' }}>
              <label style={{
                display: 'block',
                color: '#fff',
                fontSize: '0.875rem',
                fontWeight: '600',
                marginBottom: '0.5rem'
              }}>
                Sets & Gewicht *
              </label>
              
              {workoutForm.sets.map((set, index) => (
                <div key={index} style={{
                  display: 'flex',
                  gap: '0.5rem',
                  marginBottom: '0.5rem',
                  alignItems: 'center'
                }}>
                  <div style={{ flex: 1 }}>
                    <input
                      type="number"
                      placeholder="Reps"
                      value={set.reps}
                      onChange={(e) => updateSet(index, 'reps', e.target.value)}
                      style={{
                        width: '100%',
                        padding: '0.5rem',
                        background: '#2a2a2a',
                        border: '1px solid #10b98133',
                        borderRadius: '6px',
                        color: '#fff',
                        fontSize: '0.875rem'
                      }}
                    />
                  </div>
                  
                  <div style={{ flex: 1 }}>
                    <input
                      type="number"
                      step="0.5"
                      placeholder="KG"
                      value={set.weight}
                      onChange={(e) => updateSet(index, 'weight', e.target.value)}
                      style={{
                        width: '100%',
                        padding: '0.5rem',
                        background: '#2a2a2a',
                        border: '1px solid #10b98133',
                        borderRadius: '6px',
                        color: '#fff',
                        fontSize: '0.875rem'
                      }}
                    />
                  </div>
                  
                  {workoutForm.sets.length > 1 && (
                    <button
                      onClick={() => removeSet(index)}
                      style={{
                        background: '#ef4444',
                        color: '#fff',
                        border: 'none',
                        borderRadius: '6px',
                        padding: '0.5rem',
                        fontSize: '0.875rem',
                        cursor: 'pointer',
                        minWidth: '40px'
                      }}
                    >
                      ✕
                    </button>
                  )}
                </div>
              ))}
              
              <button
                onClick={addSet}
                style={{
                  background: 'rgba(16, 185, 129, 0.2)',
                  color: '#10b981',
                  border: '1px solid #10b98133',
                  borderRadius: '6px',
                  padding: '0.5rem 0.75rem',
                  fontSize: '0.875rem',
                  cursor: 'pointer',
                  width: '100%',
                  fontWeight: '600'
                }}
              >
                ➕ Set Toevoegen
              </button>
            </div>

            {/* Notes */}
            <div style={{ marginBottom: '1.5rem' }}>
              <label style={{
                display: 'block',
                color: '#fff',
                fontSize: '0.875rem',
                fontWeight: '600',
                marginBottom: '0.5rem'
              }}>
                📝 Notities (optioneel)
              </label>
              
              <textarea
                placeholder="Hoe ging de workout? Notities voor volgende keer..."
                value={workoutForm.notes}
                onChange={(e) => setWorkoutForm(prev => ({ ...prev, notes: e.target.value }))}
                style={{
                  width: '100%',
                  padding: '0.75rem',
                  background: '#2a2a2a',
                  border: '1px solid #10b98133',
                  borderRadius: '6px',
                  color: '#fff',
                  fontSize: '0.875rem',
                  minHeight: '80px',
                  resize: 'vertical'
                }}
              />
            </div>

            {/* Action Buttons */}
            <div style={{
              display: 'flex',
              gap: '0.75rem',
              justifyContent: 'flex-end'
            }}>
              <button
                onClick={closeWorkoutModal}
                style={{
                  background: 'rgba(255,255,255,0.1)',
                  color: '#fff',
                  border: '1px solid rgba(255,255,255,0.2)',
                  borderRadius: '6px',
                  padding: '0.75rem 1rem',
                  fontSize: '0.875rem',
                  cursor: 'pointer',
                  fontWeight: '600'
                }}
              >
                Annuleren
              </button>
              
              <button
                onClick={saveWorkout}
                disabled={!workoutForm.exerciseName || !workoutForm.sets.some(s => s.reps && s.weight)}
                style={{
                  background: workoutForm.exerciseName && workoutForm.sets.some(s => s.reps && s.weight) 
                    ? '#10b981' : 'rgba(16, 185, 129, 0.3)',
                  color: '#fff',
                  border: 'none',
                  borderRadius: '6px',
                  padding: '0.75rem 1.5rem',
                  fontSize: '0.875rem',
                  cursor: workoutForm.exerciseName && workoutForm.sets.some(s => s.reps && s.weight) 
                    ? 'pointer' : 'not-allowed',
                  fontWeight: '600'
                }}
              >
                💪 Workout Opslaan
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  )
}
