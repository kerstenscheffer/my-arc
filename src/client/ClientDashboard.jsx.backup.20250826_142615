// src/client/ClientDashboard.jsx - PREMIUM UPGRADED VERSION
import NotificationWidget from '../modules/notifications/NotificationWidget';
import { useState, useEffect, useRef } from 'react'
import DatabaseService from '../services/DatabaseService'
import ClientHome from './pages/ClientHome'
import MealPlanMain from '../modules/meal-plan/MealPlanMain'
import ClientWorkoutPlan from './pages/ClientWorkoutPlan'
import ClientProgress from './pages/ClientProgress'
import ClientProfile from './pages/ClientProfile'
import ClientRecipeLibrary from './pages/ClientRecipeLibrary'
import ClientShoppingList from './pages/ClientShoppingList'
import ClientCalls from '../modules/call-planning/ClientCalls'
import { useLanguage } from '../contexts/LanguageContext'

// Lucide Icons imports
import { 
  Home, 
  Dumbbell, 
  Utensils, 
  TrendingUp, 
  User, 
  Phone,
  Bell,
  Menu,
  X,
  LogOut,
  ChevronRight
} from 'lucide-react'

// Initialize database service
const db = DatabaseService

// Debug check
if (!db) {
  console.error('DatabaseService not initialized!')
}

// Premium NavIcon component met Lucide icons
function NavIcon({ Icon, size = 24, active = false }) {
  return (
    <div style={{
      width: size + 12,
      height: size + 12,
      borderRadius: '12px',
      background: active 
        ? 'linear-gradient(135deg, rgba(16, 185, 129, 0.2) 0%, rgba(16, 185, 129, 0.1) 100%)'
        : 'rgba(255, 255, 255, 0.03)',
      backdropFilter: active ? 'blur(10px)' : 'blur(5px)',
      border: active ? '1px solid #10b981' : '1px solid rgba(255, 255, 255, 0.1)',
      display: 'flex',
      alignItems: 'center',
      justifyContent: 'center',
      transition: 'all 0.3s cubic-bezier(0.4, 0, 0.2, 1)',
      boxShadow: active ? '0 4px 12px rgba(16, 185, 129, 0.3)' : 'none'
    }}>
      <Icon 
        size={size}
        color={active ? '#10b981' : 'rgba(255, 255, 255, 0.7)'}
        style={{
          transition: 'all 0.3s ease'
        }}
      />
    </div>
  )
}

// Premium Notification Bell Component
function NotificationBell({ clientId, db }) {
  const [notifications, setNotifications] = useState([])
  const [unreadCount, setUnreadCount] = useState(0)
  const [showDropdown, setShowDropdown] = useState(false)
  const [loading, setLoading] = useState(false)
  const dropdownRef = useRef(null)
  
  // Load notifications
  const loadNotifications = async () => {
    if (!clientId) return
    
    try {
      setLoading(true)
      const [notifs, count] = await Promise.all([
        db.getActiveNotifications(clientId, { limit: 5 }),
        db.getUnreadNotificationCount(clientId)
      ])
      setNotifications(notifs || [])
      setUnreadCount(count || 0)
    } catch (error) {
      console.error('Error loading notifications:', error)
    } finally {
      setLoading(false)
    }
  }
  
  useEffect(() => {
    loadNotifications()
    // Refresh every 30 seconds
    const interval = setInterval(loadNotifications, 30000)
    return () => clearInterval(interval)
  }, [clientId])
  
  // Close dropdown when clicking outside
  useEffect(() => {
    const handleClickOutside = (event) => {
      if (dropdownRef.current && !dropdownRef.current.contains(event.target)) {
        setShowDropdown(false)
      }
    }
    
    if (showDropdown) {
      document.addEventListener('mousedown', handleClickOutside)
    }
    
    return () => {
      document.removeEventListener('mousedown', handleClickOutside)
    }
  }, [showDropdown])
  
  const handleMarkAsRead = async (notificationId) => {
    try {
      await db.markNotificationRead(notificationId)
      await loadNotifications()
    } catch (error) {
      console.error('Error marking notification as read:', error)
    }
  }
  
  const handleDismiss = async (notificationId) => {
    try {
      await db.dismissNotification(notificationId)
      await loadNotifications()
    } catch (error) {
      console.error('Error dismissing notification:', error)
    }
  }
  
  const getPriorityColor = (priority) => {
    switch(priority) {
      case 'urgent': return '#ef4444'  // Rood
      case 'normal': return '#10b981'  // Groen
      case 'low': return '#6b7280'     // Grijs
      default: return '#10b981'
    }
  }
  
  return (
    <div style={{ position: 'relative' }} ref={dropdownRef}>
      {/* Bell Button */}
      <button
        onClick={() => setShowDropdown(!showDropdown)}
        style={{
          position: 'relative',
          width: '44px',
          height: '44px',
          borderRadius: '12px',
          background: showDropdown 
            ? 'linear-gradient(135deg, rgba(16, 185, 129, 0.2) 0%, rgba(16, 185, 129, 0.1) 100%)'
            : 'rgba(255, 255, 255, 0.05)',
          backdropFilter: 'blur(10px)',
          border: showDropdown ? '1px solid #10b981' : '1px solid rgba(255, 255, 255, 0.15)',
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'center',
          cursor: 'pointer',
          transition: 'all 0.3s cubic-bezier(0.4, 0, 0.2, 1)',
          color: '#fff'
        }}
        onMouseEnter={(e) => {
          if (!showDropdown) {
            e.currentTarget.style.background = 'rgba(255, 255, 255, 0.08)'
            e.currentTarget.style.transform = 'translateY(-2px)'
          }
        }}
        onMouseLeave={(e) => {
          if (!showDropdown) {
            e.currentTarget.style.background = 'rgba(255, 255, 255, 0.05)'
            e.currentTarget.style.transform = 'translateY(0)'
          }
        }}
      >
        <Bell size={20} color={showDropdown ? '#10b981' : '#fff'} />
        
        {/* Unread Badge */}
        {unreadCount > 0 && (
          <div style={{
            position: 'absolute',
            top: '-4px',
            right: '-4px',
            minWidth: '20px',
            height: '20px',
            borderRadius: '10px',
            background: 'linear-gradient(135deg, #ef4444 0%, #dc2626 100%)',
            display: 'flex',
            alignItems: 'center',
            justifyContent: 'center',
            fontSize: '0.7rem',
            fontWeight: 'bold',
            color: '#fff',
            padding: '0 5px',
            boxShadow: '0 2px 8px rgba(239, 68, 68, 0.4)',
            animation: unreadCount > 0 ? 'pulse 2s infinite' : 'none'
          }}>
            {unreadCount > 9 ? '9+' : unreadCount}
          </div>
        )}
      </button>
      
      {/* Dropdown */}
      {showDropdown && (
        <div style={{
          position: 'absolute',
          top: '54px',
          right: 0,
          width: '360px',
          maxWidth: '90vw',
          background: 'linear-gradient(135deg, #1a1a1a 0%, #0f0f0f 100%)',
          backdropFilter: 'blur(20px)',
          borderRadius: '16px',
          border: '1px solid rgba(16, 185, 129, 0.2)',
          boxShadow: '0 20px 40px rgba(0, 0, 0, 0.8), 0 0 60px rgba(16, 185, 129, 0.1)',
          overflow: 'hidden',
          zIndex: 1000,
          animation: 'slideDown 0.3s cubic-bezier(0.4, 0, 0.2, 1)'
        }}>
          {/* Header */}
          <div style={{
            padding: '1rem 1.25rem',
            borderBottom: '1px solid rgba(255, 255, 255, 0.1)',
            background: 'linear-gradient(135deg, rgba(16, 185, 129, 0.1) 0%, transparent 100%)'
          }}>
            <div style={{
              display: 'flex',
              justifyContent: 'space-between',
              alignItems: 'center'
            }}>
              <h3 style={{
                fontSize: '1.1rem',
                fontWeight: '600',
                color: '#fff',
                margin: 0
              }}>
                Meldingen
              </h3>
              {unreadCount > 0 && (
                <span style={{
                  padding: '0.25rem 0.75rem',
                  background: 'rgba(16, 185, 129, 0.2)',
                  borderRadius: '20px',
                  fontSize: '0.8rem',
                  color: '#10b981',
                  fontWeight: '600'
                }}>
                  {unreadCount} nieuw
                </span>
              )}
            </div>
          </div>
          
          {/* Notifications List */}
          <div style={{
            maxHeight: '400px',
            overflowY: 'auto',
            padding: '0.5rem'
          }}>
            {loading ? (
              <div style={{
                padding: '2rem',
                textAlign: 'center',
                color: 'rgba(255, 255, 255, 0.5)'
              }}>
                <div style={{
                  width: '30px',
                  height: '30px',
                  border: '3px solid rgba(16, 185, 129, 0.2)',
                  borderTopColor: '#10b981',
                  borderRadius: '50%',
                  margin: '0 auto',
                  animation: 'spin 1s linear infinite'
                }} />
              </div>
            ) : notifications.length === 0 ? (
              <div style={{
                padding: '2rem',
                textAlign: 'center',
                color: 'rgba(255, 255, 255, 0.5)'
              }}>
                <Bell size={48} color="rgba(255, 255, 255, 0.3)" style={{ margin: '0 auto 1rem' }} />
                <p style={{ margin: 0, fontSize: '0.9rem' }}>Geen nieuwe meldingen</p>
              </div>
            ) : (
              notifications.map((notif) => (
                <div
                  key={notif.id}
                  style={{
                    marginBottom: '0.5rem',
                    padding: '1rem',
                    background: notif.read_status 
                      ? 'rgba(255, 255, 255, 0.03)'
                      : 'rgba(16, 185, 129, 0.08)',
                    borderRadius: '12px',
                    border: `1px solid ${notif.read_status ? 'rgba(255, 255, 255, 0.05)' : 'rgba(16, 185, 129, 0.2)'}`,
                    cursor: 'pointer',
                    transition: 'all 0.3s ease',
                    position: 'relative'
                  }}
                  onClick={() => !notif.read_status && handleMarkAsRead(notif.id)}
                  onMouseEnter={(e) => {
                    e.currentTarget.style.background = notif.read_status 
                      ? 'rgba(255, 255, 255, 0.05)'
                      : 'rgba(16, 185, 129, 0.12)'
                  }}
                  onMouseLeave={(e) => {
                    e.currentTarget.style.background = notif.read_status 
                      ? 'rgba(255, 255, 255, 0.03)'
                      : 'rgba(16, 185, 129, 0.08)'
                  }}
                >
                  {/* Priority Indicator */}
                  <div style={{
                    position: 'absolute',
                    left: '0',
                    top: '0',
                    bottom: '0',
                    width: '3px',
                    background: getPriorityColor(notif.priority),
                    borderRadius: '12px 0 0 12px'
                  }} />
                  
                  <div style={{ paddingLeft: '0.5rem' }}>
                    {/* Title */}
                    <div style={{
                      display: 'flex',
                      justifyContent: 'space-between',
                      alignItems: 'flex-start',
                      marginBottom: '0.5rem'
                    }}>
                      <h4 style={{
                        fontSize: '0.95rem',
                        fontWeight: '600',
                        color: '#fff',
                        margin: 0
                      }}>
                        {notif.title || 'Coach Melding'}
                      </h4>
                      <button
                        onClick={(e) => {
                          e.stopPropagation()
                          handleDismiss(notif.id)
                        }}
                        style={{
                          background: 'none',
                          border: 'none',
                          color: 'rgba(255, 255, 255, 0.4)',
                          cursor: 'pointer',
                          padding: '2px',
                          transition: 'color 0.2s'
                        }}
                        onMouseEnter={(e) => {
                          e.currentTarget.style.color = 'rgba(255, 255, 255, 0.7)'
                        }}
                        onMouseLeave={(e) => {
                          e.currentTarget.style.color = 'rgba(255, 255, 255, 0.4)'
                        }}
                      >
                        <X size={16} />
                      </button>
                    </div>
                    
                    {/* Message */}
                    <p style={{
                      fontSize: '0.85rem',
                      color: 'rgba(255, 255, 255, 0.7)',
                      margin: '0 0 0.5rem 0',
                      lineHeight: '1.4'
                    }}>
                      {notif.message}
                    </p>
                    
                    {/* Footer */}
                    <div style={{
                      display: 'flex',
                      justifyContent: 'space-between',
                      alignItems: 'center'
                    }}>
                      <span style={{
                        fontSize: '0.75rem',
                        color: 'rgba(255, 255, 255, 0.4)'
                      }}>
                        {new Date(notif.created_at).toLocaleString('nl-NL', {
                          day: 'numeric',
                          month: 'short',
                          hour: '2-digit',
                          minute: '2-digit'
                        })}
                      </span>
                      
                      {!notif.read_status && (
                        <span style={{
                          width: '8px',
                          height: '8px',
                          borderRadius: '50%',
                          background: '#10b981',
                          display: 'inline-block',
                          animation: 'pulse 2s infinite'
                        }} />
                      )}
                    </div>
                  </div>
                </div>
              ))
            )}
          </div>
          
          {/* Footer Actions */}
          {notifications.length > 0 && (
            <div style={{
              padding: '0.75rem 1.25rem',
              borderTop: '1px solid rgba(255, 255, 255, 0.1)',
              display: 'flex',
              justifyContent: 'center'
            }}>
              <button
                onClick={() => {
                  setShowDropdown(false)
                  // Navigate to full notifications page if needed
                }}
                style={{
                  padding: '0.5rem 1.5rem',
                  background: 'linear-gradient(135deg, rgba(16, 185, 129, 0.2) 0%, rgba(16, 185, 129, 0.1) 100%)',
                  border: '1px solid rgba(16, 185, 129, 0.3)',
                  borderRadius: '8px',
                  color: '#10b981',
                  fontSize: '0.85rem',
                  fontWeight: '600',
                  cursor: 'pointer',
                  transition: 'all 0.3s ease'
                }}
                onMouseEnter={(e) => {
                  e.currentTarget.style.background = 'linear-gradient(135deg, rgba(16, 185, 129, 0.3) 0%, rgba(16, 185, 129, 0.2) 100%)'
                }}
                onMouseLeave={(e) => {
                  e.currentTarget.style.background = 'linear-gradient(135deg, rgba(16, 185, 129, 0.2) 0%, rgba(16, 185, 129, 0.1) 100%)'
                }}
              >
                Alle meldingen bekijken
              </button>
            </div>
          )}
        </div>
      )}
    </div>
  )
}

// Main ClientDashboard Component
export default function ClientDashboard() {
  const [currentView, setCurrentView] = useState('home')
  const [user, setUser] = useState(null)
  const [client, setClient] = useState(null)
  const [schema, setSchema] = useState(null)
  const [loading, setLoading] = useState(true)
  const [mobileMenuOpen, setMobileMenuOpen] = useState(false)
  const [error, setError] = useState(null)
  const [isMobile, setIsMobile] = useState(window.innerWidth <= 768)
  
  // Use language context
  const { t, language, toggleLanguage } = useLanguage()
  
  // Handle window resize
  useEffect(() => {
    const handleResize = () => {
      setIsMobile(window.innerWidth <= 768)
      
      // Fix viewport height for mobile browsers
      const vh = window.innerHeight * 0.01
      document.documentElement.style.setProperty('--vh', `${vh}px`)
    }
    
    handleResize() // Initial call
    window.addEventListener('resize', handleResize)
    window.addEventListener('orientationchange', handleResize)
    
    return () => {
      window.removeEventListener('resize', handleResize)
      window.removeEventListener('orientationchange', handleResize)
    }
  }, [])

  // Navigation items with Lucide icons
  const navigationItems = [
    { id: 'home', label: t('nav.home'), Icon: Home },
    { id: 'workout', label: t('nav.workout'), Icon: Dumbbell },
    { id: 'mealplan', label: t('nav.mealplan'), Icon: Utensils },
    { id: 'calls', label: 'Calls', Icon: Phone },
    { id: 'progress', label: t('nav.progress'), Icon: TrendingUp },
    { id: 'profile', label: t('nav.profile'), Icon: User }
  ]

  // Add viewport meta tag for mobile
  useEffect(() => {
    let metaViewport = document.querySelector('meta[name="viewport"]')
    if (!metaViewport) {
      metaViewport = document.createElement('meta')
      metaViewport.name = 'viewport'
      document.head.appendChild(metaViewport)
    }
    metaViewport.content = 'width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no'
    
    return () => {
      // Cleanup if needed
    }
  }, [])
  
  useEffect(() => {
    loadClientData()
  }, [])

  const loadClientData = async () => {
    try {
      console.log('🔍 Step 1: Getting auth user...')
      const authUser = await db.getCurrentUser()
      console.log('Auth user:', authUser)
      
      if (!authUser?.email) {
        console.error('No auth user found')
        setError('Geen gebruiker gevonden')
        setLoading(false)
        return
      }
      
      setUser(authUser)
      
      console.log('🔍 Step 2: Getting client data for email:', authUser.email)
      const clientData = await db.getClientByEmail(authUser.email)
      console.log('Client data:', clientData)
      
      if (!clientData) {
        console.error('No client found for email:', authUser.email)
        setError('Client account niet gevonden voor: ' + authUser.email)
        setLoading(false)
        return
      }
      
      setClient(clientData)
      
      console.log('🔍 Step 3: Getting assigned schema...')
      if (clientData.assigned_schema_id) {
        try {
          const schemaData = await db.getClientSchema(clientData.id)
          console.log('Schema data:', schemaData)
          setSchema(schemaData)
        } catch (schemaError) {
          console.warn('Could not load schema:', schemaError)
          // Don't fail completely if schema fails
          setSchema(null)
        }
      } else {
        console.log('No schema assigned to client')
      }
    } catch (error) {
      console.error('Error loading client data:', error)
      setError('Fout bij laden van gegevens: ' + error.message)
    } finally {
      setLoading(false)
    }
  }

  const handleLogout = async () => {
    try {
      await db.signOut()
      window.location.href = '/'
    } catch (error) {
      console.error('Error logging out:', error)
    }
  }

  if (loading) {
    return (
      <div style={{ 
        minHeight: '100vh',
        background: 'linear-gradient(180deg, #0a0f0d 0%, #1a1a1a 100%)',
        display: 'flex',
        alignItems: 'center',
        justifyContent: 'center'
      }}>
        <div style={{ textAlign: 'center' }}>
          <div style={{
            width: '60px',
            height: '60px',
            border: '3px solid rgba(16, 185, 129, 0.2)',
            borderTopColor: '#10b981',
            borderRadius: '50%',
            margin: '0 auto 1.5rem',
            animation: 'spin 1s linear infinite'
          }} />
          <div style={{ 
            color: '#fff', 
            fontSize: '1.1rem',
            fontWeight: '500'
          }}>
            {t('common.loading')}...
          </div>
        </div>
      </div>
    )
  }

  if (error) {
    return (
      <div style={{ 
        minHeight: '100vh',
        background: 'linear-gradient(180deg, #0a0f0d 0%, #1a1a1a 100%)',
        display: 'flex',
        alignItems: 'center',
        justifyContent: 'center',
        padding: '1rem'
      }}>
        <div style={{
          maxWidth: '400px',
          width: '100%',
          background: 'rgba(17, 17, 17, 0.8)',
          backdropFilter: 'blur(20px)',
          borderRadius: '20px',
          border: '1px solid rgba(239, 68, 68, 0.3)',
          padding: '2rem',
          textAlign: 'center',
          boxShadow: '0 20px 40px rgba(0, 0, 0, 0.5)'
        }}>
          <h2 style={{
            fontSize: '1.5rem',
            fontWeight: '700',
            color: '#fff',
            marginBottom: '1rem'
          }}>
            ⚠️ {t('common.error')}
          </h2>
          <p style={{
            color: 'rgba(255, 255, 255, 0.7)',
            marginBottom: '1.5rem',
            lineHeight: '1.5'
          }}>
            {error}
          </p>
          <div style={{ 
            display: 'flex', 
            gap: '1rem', 
            justifyContent: 'center' 
          }}>
            <button 
              onClick={() => window.location.reload()} 
              style={{
                padding: '0.75rem 1.5rem',
                background: 'linear-gradient(135deg, #10b981 0%, #059669 100%)',
                border: 'none',
                borderRadius: '10px',
                color: '#fff',
                fontWeight: '600',
                cursor: 'pointer',
                transition: 'all 0.3s ease',
                boxShadow: '0 4px 15px rgba(16, 185, 129, 0.3)'
              }}
              onMouseEnter={(e) => {
                e.currentTarget.style.transform = 'translateY(-2px)'
                e.currentTarget.style.boxShadow = '0 8px 25px rgba(16, 185, 129, 0.4)'
              }}
              onMouseLeave={(e) => {
                e.currentTarget.style.transform = 'translateY(0)'
                e.currentTarget.style.boxShadow = '0 4px 15px rgba(16, 185, 129, 0.3)'
              }}
            >
              {t('common.refresh')}
            </button>
            <button 
              onClick={handleLogout}
              style={{
                padding: '0.75rem 1.5rem',
                background: 'rgba(255, 255, 255, 0.1)',
                border: '1px solid rgba(255, 255, 255, 0.2)',
                borderRadius: '10px',
                color: '#fff',
                fontWeight: '600',
                cursor: 'pointer',
                transition: 'all 0.3s ease'
              }}
              onMouseEnter={(e) => {
                e.currentTarget.style.background = 'rgba(255, 255, 255, 0.15)'
              }}
              onMouseLeave={(e) => {
                e.currentTarget.style.background = 'rgba(255, 255, 255, 0.1)'
              }}
            >
              {t('common.logout')}
            </button>
          </div>
        </div>
      </div>
    )
  }

  if (!client) {
    return (
      <div style={{ 
        minHeight: '100vh',
        background: 'linear-gradient(180deg, #0a0f0d 0%, #1a1a1a 100%)',
        display: 'flex',
        alignItems: 'center',
        justifyContent: 'center',
        padding: '1rem'
      }}>
        <div style={{
          maxWidth: '400px',
          width: '100%',
          background: 'rgba(17, 17, 17, 0.8)',
          backdropFilter: 'blur(20px)',
          borderRadius: '20px',
          border: '1px solid rgba(255, 255, 255, 0.1)',
          padding: '2rem',
          textAlign: 'center',
          boxShadow: '0 20px 40px rgba(0, 0, 0, 0.5)'
        }}>
          <h2 style={{
            fontSize: '1.5rem',
            fontWeight: '700',
            color: '#fff',
            marginBottom: '1rem'
          }}>
            📋 Geen client account
          </h2>
          <p style={{
            color: 'rgba(255, 255, 255, 0.7)',
            marginBottom: '0.5rem'
          }}>
            Email: {user?.email}
          </p>
          <p style={{
            color: 'rgba(255, 255, 255, 0.5)',
            marginBottom: '1.5rem',
            fontSize: '0.9rem'
          }}>
            Je email is nog niet gekoppeld aan een client account.
            Neem contact op met je coach.
          </p>
          <button 
            onClick={handleLogout}
            style={{
              width: '100%',
              padding: '0.75rem',
              background: 'linear-gradient(135deg, #ef4444 0%, #dc2626 100%)',
              border: 'none',
              borderRadius: '10px',
              color: '#fff',
              fontWeight: '600',
              cursor: 'pointer',
              transition: 'all 0.3s ease',
              boxShadow: '0 4px 15px rgba(239, 68, 68, 0.3)'
            }}
            onMouseEnter={(e) => {
              e.currentTarget.style.transform = 'translateY(-2px)'
              e.currentTarget.style.boxShadow = '0 8px 25px rgba(239, 68, 68, 0.4)'
            }}
            onMouseLeave={(e) => {
              e.currentTarget.style.transform = 'translateY(0)'
              e.currentTarget.style.boxShadow = '0 4px 15px rgba(239, 68, 68, 0.3)'
            }}
          >
            {t('common.logout')}
          </button>
        </div>
      </div>
    )
  }

  return (
    <div style={{ 
      minHeight: '100vh',
      background: 'linear-gradient(180deg, #0a0f0d 0%, #1a1a1a 100%)',
      position: 'relative'
    }}>
      {/* Premium Header */}
      <header style={{
        background: 'linear-gradient(135deg, rgba(17, 17, 17, 0.95) 0%, rgba(10, 15, 13, 0.95) 100%)',
        backdropFilter: 'blur(20px)',
        borderBottom: '1px solid rgba(16, 185, 129, 0.2)',
        position: 'sticky',
        top: 0,
        zIndex: 100,
        boxShadow: '0 4px 20px rgba(0, 0, 0, 0.5)'
      }}>
        <div style={{
          maxWidth: '1400px',
          margin: '0 auto',
          padding: isMobile ? '1rem' : '1.25rem 2rem',
          display: 'flex',
          justifyContent: 'space-between',
          alignItems: 'center'
        }}>
          {/* Logo Section */}
          <div style={{
            display: 'flex',
            alignItems: 'center',
            gap: '1rem'
          }}>
            {/* Mobile Menu Button */}
            {isMobile && (
              <button
                onClick={() => setMobileMenuOpen(!mobileMenuOpen)}
                style={{
                  width: '40px',
                  height: '40px',
                  borderRadius: '10px',
                  background: 'rgba(255, 255, 255, 0.05)',
                  backdropFilter: 'blur(10px)',
                  border: '1px solid rgba(255, 255, 255, 0.1)',
                  display: 'flex',
                  alignItems: 'center',
                  justifyContent: 'center',
                  cursor: 'pointer',
                  transition: 'all 0.3s ease',
                  color: '#fff'
                }}
              >
                <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2">
                  {mobileMenuOpen ? (
                    <path d="M6 18L18 6M6 6l12 12" />
                  ) : (
                    <>
                      <path d="M3 12h18" />
                      <path d="M3 6h18" />
                      <path d="M3 18h18" />
                    </>
                  )}
                </svg>
              </button>
            )}
            
            <div>
              <h1 style={{
                fontSize: isMobile ? '1.3rem' : '1.75rem',
                fontWeight: '900',
                background: 'linear-gradient(135deg, #10b981 0%, #059669 100%)',
                WebkitBackgroundClip: 'text',
                WebkitTextFillColor: 'transparent',
                backgroundClip: 'text',
                margin: 0,
                letterSpacing: '-0.02em'
              }}>
                MY ARC
              </h1>
              <p style={{
                fontSize: isMobile ? '0.75rem' : '0.85rem',
                color: 'rgba(255, 255, 255, 0.5)',
                margin: 0,
                fontWeight: '500'
              }}>
                Welcome, {client?.first_name}
              </p>
            </div>
          </div>
          
          {/* Actions Section */}
          <div style={{
            display: 'flex',
            alignItems: 'center',
            gap: '0.75rem'
          }}>
            {/* Language Toggle */}
            <button
              onClick={toggleLanguage}
              style={{
                width: '44px',
                height: '44px',
                borderRadius: '12px',
                background: 'rgba(255, 255, 255, 0.05)',
                backdropFilter: 'blur(10px)',
                border: '1px solid rgba(255, 255, 255, 0.15)',
                display: 'flex',
                alignItems: 'center',
                justifyContent: 'center',
                cursor: 'pointer',
                transition: 'all 0.3s cubic-bezier(0.4, 0, 0.2, 1)',
                fontSize: '1.2rem',
                fontWeight: '600',
                color: '#fff'
              }}
              onMouseEnter={(e) => {
                e.currentTarget.style.background = 'rgba(255, 255, 255, 0.08)'
                e.currentTarget.style.transform = 'translateY(-2px)'
              }}
              onMouseLeave={(e) => {
                e.currentTarget.style.background = 'rgba(255, 255, 255, 0.05)'
                e.currentTarget.style.transform = 'translateY(0)'
              }}
            >
              {language === 'nl' ? '🇳🇱' : '🇬🇧'}
            </button>
            
            {/* Notification Bell */}
            <NotificationBell clientId={client?.id} db={db} />
            
            {/* Logout Button - Desktop Only */}
            {!isMobile && (
              <button
                onClick={handleLogout}
                style={{
                  padding: '0.6rem 1.25rem',
                  borderRadius: '12px',
                  background: 'linear-gradient(135deg, rgba(239, 68, 68, 0.2) 0%, rgba(239, 68, 68, 0.1) 100%)',
                  border: '1px solid rgba(239, 68, 68, 0.3)',
                  color: '#ef4444',
                  fontWeight: '600',
                  fontSize: '0.9rem',
                  cursor: 'pointer',
                  transition: 'all 0.3s cubic-bezier(0.4, 0, 0.2, 1)',
                  display: 'flex',
                  alignItems: 'center',
                  gap: '0.5rem'
                }}
                onMouseEnter={(e) => {
                  e.currentTarget.style.background = 'linear-gradient(135deg, rgba(239, 68, 68, 0.3) 0%, rgba(239, 68, 68, 0.2) 100%)'
                  e.currentTarget.style.transform = 'translateY(-2px)'
                }}
                onMouseLeave={(e) => {
                  e.currentTarget.style.background = 'linear-gradient(135deg, rgba(239, 68, 68, 0.2) 0%, rgba(239, 68, 68, 0.1) 100%)'
                  e.currentTarget.style.transform = 'translateY(0)'
                }}
              >
                <LogOut size={18} />
                {t('common.logout')}
              </button>
            )}
          </div>
        </div>
      </header>

      {/* Mobile Sliding Menu */}
      {isMobile && (
        <div style={{
          position: 'fixed',
          top: 0,
          left: mobileMenuOpen ? 0 : '-100%',
          width: '280px',
          height: '100vh',
          background: 'linear-gradient(180deg, #1a1a1a 0%, #0f0f0f 100%)',
          backdropFilter: 'blur(20px)',
          borderRight: '1px solid rgba(16, 185, 129, 0.2)',
          transition: 'left 0.3s cubic-bezier(0.4, 0, 0.2, 1)',
          zIndex: 99,
          padding: '1.5rem',
          paddingTop: '5rem',
          boxShadow: mobileMenuOpen ? '10px 0 40px rgba(0, 0, 0, 0.5)' : 'none'
        }}>
          <nav style={{
            display: 'flex',
            flexDirection: 'column',
            gap: '0.5rem'
          }}>
            {navigationItems.map(item => (
              <button
                key={item.id}
                onClick={() => {
                  setCurrentView(item.id)
                  setMobileMenuOpen(false)
                }}
                style={{
                  display: 'flex',
                  alignItems: 'center',
                  gap: '1rem',
                  width: '100%',
                  padding: '0.875rem 1rem',
                  background: currentView === item.id 
                    ? 'linear-gradient(135deg, rgba(16, 185, 129, 0.2) 0%, rgba(16, 185, 129, 0.1) 100%)'
                    : 'transparent',
                  border: 'none',
                  borderLeft: currentView === item.id ? '3px solid #10b981' : '3px solid transparent',
                  color: currentView === item.id ? '#10b981' : 'rgba(255, 255, 255, 0.7)',
                  fontSize: '0.95rem',
                  fontWeight: currentView === item.id ? '600' : '500',
                  cursor: 'pointer',
                  transition: 'all 0.3s ease',
                  borderRadius: '8px'
                }}
              >
                <NavIcon 
                  Icon={item.Icon} 
                  size={20} 
                  active={currentView === item.id}
                />
                {item.label}
              </button>
            ))}
            
            <button 
              onClick={handleLogout}
              style={{
                width: '100%',
                padding: '0.875rem 1rem',
                marginTop: '2rem',
                background: 'linear-gradient(135deg, rgba(239, 68, 68, 0.2) 0%, rgba(239, 68, 68, 0.1) 100%)',
                border: '1px solid rgba(239, 68, 68, 0.3)',
                borderRadius: '10px',
                color: '#ef4444',
                fontSize: '0.95rem',
                fontWeight: '600',
                cursor: 'pointer',
                display: 'flex',
                alignItems: 'center',
                justifyContent: 'center',
                gap: '0.5rem',
                transition: 'all 0.3s ease'
              }}
            >
              <LogOut size={18} />
              {t('common.logout')}
            </button>
          </nav>
        </div>
      )}

      {/* Overlay for mobile menu */}
      {isMobile && mobileMenuOpen && (
        <div
          onClick={() => setMobileMenuOpen(false)}
          style={{
            position: 'fixed',
            top: 0,
            left: 0,
            right: 0,
            bottom: 0,
            background: 'rgba(0, 0, 0, 0.7)',
            zIndex: 98,
            backdropFilter: 'blur(5px)'
          }}
        />
      )}

      {/* Main Content */}
      <main style={{
        maxWidth: '1400px',
        margin: '0 auto',
        padding: isMobile ? '1rem' : '2rem',
        paddingBottom: isMobile ? '100px' : '2rem'
      }}>
        <div style={{
          display: 'flex',
          gap: '2rem'
        }}>
          {/* Desktop Side Navigation */}
          {!isMobile && (
            <nav style={{
              position: 'sticky',
              top: '100px',
              width: '240px',
              height: 'fit-content'
            }}>
              <div style={{
                background: 'rgba(17, 17, 17, 0.5)',
                backdropFilter: 'blur(10px)',
                borderRadius: '16px',
                border: '1px solid rgba(16, 185, 129, 0.1)',
                padding: '0.5rem',
                boxShadow: '0 10px 30px rgba(0, 0, 0, 0.3)'
              }}>
                {navigationItems.map(item => (
                  <button
                    key={item.id}
                    onClick={() => setCurrentView(item.id)}
                    style={{
                      display: 'flex',
                      alignItems: 'center',
                      gap: '0.75rem',
                      width: '100%',
                      padding: '0.875rem 1rem',
                      marginBottom: '0.25rem',
                      background: currentView === item.id 
                        ? 'linear-gradient(135deg, rgba(16, 185, 129, 0.15) 0%, rgba(16, 185, 129, 0.08) 100%)'
                        : 'transparent',
                      border: currentView === item.id 
                        ? '1px solid rgba(16, 185, 129, 0.3)' 
                        : '1px solid transparent',
                      borderRadius: '12px',
                      cursor: 'pointer',
                      transition: 'all 0.3s cubic-bezier(0.4, 0, 0.2, 1)',
                      color: currentView === item.id ? '#10b981' : 'rgba(255, 255, 255, 0.7)',
                      fontSize: '0.95rem',
                      fontWeight: currentView === item.id ? '600' : '500'
                    }}
                    onMouseEnter={(e) => {
                      if (currentView !== item.id) {
                        e.currentTarget.style.background = 'rgba(255, 255, 255, 0.03)'
                        e.currentTarget.style.transform = 'translateX(4px)'
                      }
                    }}
                    onMouseLeave={(e) => {
                      if (currentView !== item.id) {
                        e.currentTarget.style.background = 'transparent'
                        e.currentTarget.style.transform = 'translateX(0)'
                      }
                    }}
                  >
                    <NavIcon 
                      Icon={item.Icon} 
                      size={22} 
                      active={currentView === item.id}
                    />
                    <span>{item.label}</span>
                  </button>
                ))}
              </div>
            </nav>
          )}

          {/* View Content */}
          <div style={{ 
            flex: 1,
            animation: 'fadeIn 0.5s ease'
          }}>
            {currentView === 'home' && (
              <ClientHome 
                client={client} 
                db={db}
                setCurrentView={setCurrentView} 
              />
            )}
{currentView === 'mealplan' && (
  <MealPlanMain
    client={client}
    db={db}
    onNavigate={setCurrentView}
  />
)}

            {currentView === 'workout' && (
              <ClientWorkoutPlan 
                client={client} 
                schema={schema}
                db={db}
              />
            )}
            {currentView === 'calls' && (
              <ClientCalls 
                db={db}
                clientInfo={client} 
              />
            )}
            {currentView === 'progress' && (
              <ClientProgress 
                client={client} 
                schema={schema}
                db={db}
              />
            )}
            {currentView === 'profile' && (
              <ClientProfile 
                client={client} 
                user={user}
                db={db}
              />
            )}
            {currentView === 'recipe-library' && (
              <ClientRecipeLibrary 
                client={client} 
                db={db}
                onNavigate={setCurrentView}
              />
            )}
            {currentView === 'shopping-list' && (
              <ClientShoppingList 
                client={client}
                db={db}
                onNavigate={setCurrentView}
              />
            )}
          </div>
        </div>
      </main>

      {/* Mobile Bottom Navigation - Cleaner zonder tekst */}
      {isMobile && (
        <nav style={{
          position: 'fixed',
          bottom: 0,
          left: 0,
          right: 0,
          background: 'linear-gradient(180deg, rgba(17, 17, 17, 0.98) 0%, rgba(10, 15, 13, 0.98) 100%)',
          backdropFilter: 'blur(20px)',
          borderTop: '1px solid rgba(16, 185, 129, 0.2)',
          padding: '0.75rem 0.5rem',
          zIndex: 100,
          boxShadow: '0 -4px 20px rgba(0, 0, 0, 0.5)'
        }}>
          <div style={{
            display: 'flex',
            justifyContent: 'space-around',
            alignItems: 'center'
          }}>
            {navigationItems.map(item => (
              <button
                key={item.id}
                onClick={() => setCurrentView(item.id)}
                style={{
                  display: 'flex',
                  flexDirection: 'column',
                  alignItems: 'center',
                  padding: '0.5rem',
                  background: 'transparent',
                  border: 'none',
                  cursor: 'pointer',
                  transition: 'all 0.3s cubic-bezier(0.4, 0, 0.2, 1)',
                  transform: currentView === item.id ? 'translateY(-3px)' : 'translateY(0)'
                }}
              >
                <NavIcon 
                  Icon={item.Icon} 
                  size={26} 
                  active={currentView === item.id}
                />
              </button>
            ))}
          </div>
        </nav>
      )}


   {/* ADD NOTIFICATION WIDGET HERE - voor de laatste closing div */}
    <NotificationWidget 
      db={db}
clientId={user?.id}
      currentPage={currentView}
    />


      {/* CSS Animations */}
      <style>{`
        @keyframes fadeIn {
          from { opacity: 0; transform: translateY(10px); }
          to { opacity: 1; transform: translateY(0); }
        }
        
        @keyframes slideDown {
          from { 
            opacity: 0; 
            transform: translateY(-10px);
          }
          to { 
            opacity: 1; 
            transform: translateY(0);
          }
        }
        
        @keyframes spin {
          to { transform: rotate(360deg); }
        }
        
        @keyframes pulse {
          0%, 100% { opacity: 1; }
          50% { opacity: 0.6; }
        }
        
        /* Basic Mobile Fixes */
        @media (max-width: 768px) {
          /* Prevent horizontal scroll */
          body {
            overflow-x: hidden;
          }
          
          /* Fix input zoom on iOS */
          input, select, textarea {
            font-size: 16px !important;
          }
        }
      `}</style>
    </div>
  )
}
